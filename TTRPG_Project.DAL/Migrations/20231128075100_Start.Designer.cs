// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TTRPG_Project.DAL.Data;

#nullable disable

namespace TTRPG_Project.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231128075100_Start")]
    partial class Start
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.Property<int>("CreaturesId")
                        .HasColumnType("int");

                    b.Property<int>("SpellsId")
                        .HasColumnType("int");

                    b.HasKey("CreaturesId", "SpellsId");

                    b.HasIndex("SpellsId");

                    b.ToTable("CreatureSpell");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Effects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5259),
                            Description = "",
                            Enabled = true,
                            Name = "Незаметное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5260)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5261),
                            Description = "",
                            Enabled = true,
                            Name = "Кровопускающее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5261)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5262),
                            Description = "",
                            Enabled = true,
                            Name = "Пробивающее броню",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5262)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5263),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(1)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5263)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5264),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(2)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5264)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5265),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(3)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5266)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5266),
                            Description = "",
                            Enabled = true,
                            Name = "Метеоритное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5267)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5268),
                            Description = "",
                            Enabled = true,
                            Name = "Длинное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5268)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5269),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(1)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5269)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5270),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(2)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5270)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5271),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(3)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5271)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5272),
                            Description = "",
                            Enabled = true,
                            Name = "Сокрушающая сила",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5272)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5273),
                            Description = "",
                            Enabled = true,
                            Name = "Серебрянное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5274)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5275),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(1)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5275)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5276),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(2)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5276)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5277),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(3)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5277)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5278),
                            Description = "",
                            Enabled = true,
                            Name = "Улучшенное пробивание брони",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5278)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5279),
                            Description = "",
                            Enabled = true,
                            Name = "Захватное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5279)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5280),
                            Description = "",
                            Enabled = true,
                            Name = "Ловящий лезвия",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5281)
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5281),
                            Description = "",
                            Enabled = true,
                            Name = "Магические путы",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5282)
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5283),
                            Description = "",
                            Enabled = true,
                            Name = "Медленно перезаряжающееся",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5283)
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5284),
                            Description = "",
                            Enabled = true,
                            Name = "Несмертельное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5284)
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5285),
                            Description = "",
                            Enabled = true,
                            Name = "Опутывающее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5285)
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5286),
                            Description = "",
                            Enabled = true,
                            Name = "Парирующее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5286)
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5312),
                            Description = "",
                            Enabled = true,
                            Name = "Разрушающее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5312)
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5313),
                            Description = "",
                            Enabled = true,
                            Name = "Рукопашное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5313)
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5314),
                            Description = "",
                            Enabled = true,
                            Name = "Расчетная перезарядка",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5315)
                        },
                        new
                        {
                            Id = 28,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5315),
                            Description = "",
                            Enabled = true,
                            Name = "Улучшенное фокусирующее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5316)
                        },
                        new
                        {
                            Id = 29,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5317),
                            Description = "",
                            Enabled = true,
                            Name = "Устанавливаемое",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5317)
                        },
                        new
                        {
                            Id = 30,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5318),
                            Description = "",
                            Enabled = true,
                            Name = "Шприц",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5318)
                        },
                        new
                        {
                            Id = 31,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5319),
                            Description = "",
                            Enabled = true,
                            Name = "Закрывает все тело",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5319)
                        },
                        new
                        {
                            Id = 32,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5320),
                            Description = "",
                            Enabled = true,
                            Name = "Огнеупорный",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5320)
                        },
                        new
                        {
                            Id = 33,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5321),
                            Description = "",
                            Enabled = true,
                            Name = "Ограничение зрения",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5322)
                        },
                        new
                        {
                            Id = 34,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5322),
                            Description = "",
                            Enabled = true,
                            Name = "Полное укрытие",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5323)
                        },
                        new
                        {
                            Id = 35,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5469),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(Д)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5469)
                        },
                        new
                        {
                            Id = 36,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5470),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(Р)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5470)
                        },
                        new
                        {
                            Id = 37,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5471),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(К)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5471)
                        },
                        new
                        {
                            Id = 38,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5472),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(С)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5473)
                        },
                        new
                        {
                            Id = 39,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5473),
                            Description = "",
                            Enabled = true,
                            Name = "Горение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5474)
                        },
                        new
                        {
                            Id = 40,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5474),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентация",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5475)
                        },
                        new
                        {
                            Id = 41,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5476),
                            Description = "",
                            Enabled = true,
                            Name = "Отравление",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5476)
                        },
                        new
                        {
                            Id = 42,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5477),
                            Description = "",
                            Enabled = true,
                            Name = "Кровотечение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5477)
                        },
                        new
                        {
                            Id = 43,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5478),
                            Description = "",
                            Enabled = true,
                            Name = "Замораживание",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5478)
                        },
                        new
                        {
                            Id = 44,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5479),
                            Description = "",
                            Enabled = true,
                            Name = "Ошеломление",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5479)
                        },
                        new
                        {
                            Id = 45,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5480),
                            Description = "",
                            Enabled = true,
                            Name = "Опьянение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5480)
                        },
                        new
                        {
                            Id = 46,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5481),
                            Description = "",
                            Enabled = true,
                            Name = "Галлюцинации",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5481)
                        },
                        new
                        {
                            Id = 47,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5482),
                            Description = "",
                            Enabled = true,
                            Name = "Тошнота",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5483)
                        },
                        new
                        {
                            Id = 48,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5483),
                            Description = "",
                            Enabled = true,
                            Name = "Удушье",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5484)
                        },
                        new
                        {
                            Id = 49,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5484),
                            Description = "",
                            Enabled = true,
                            Name = "Слепота",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5485)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.ServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("ServicePrices");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(4780),
                            Enabled = true,
                            Name = "Базовая книга",
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(4790)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(4792),
                            Enabled = true,
                            Name = "Хоумбрю",
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(4792)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Abilitiy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("RaceId");

                    b.HasIndex("SourceId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackEffectListId")
                        .HasColumnType("int");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("int");

                    b.Property<int>("AttackType")
                        .HasColumnType("int");

                    b.Property<int>("BaseAttack")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("SourceId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.AttackEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttackId")
                        .HasColumnType("int");

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDealDamage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("EffectId");

                    b.ToTable("AttackEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultMagicAbilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Energy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsBase")
                        .HasColumnType("int");

                    b.Property<int>("BlockBase")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationSkill")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EvasionBase")
                        .HasColumnType("int");

                    b.Property<string>("GroupSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HabitatPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Intellect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoneyReward")
                        .HasColumnType("int");

                    b.Property<string>("MonsterLoreInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonsterLoreSkill")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Regeneration")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsListId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("SpellResistBase")
                        .HasColumnType("int");

                    b.Property<int?>("StatsListId")
                        .HasColumnType("int");

                    b.Property<string>("SuperstitionsInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SkillsListId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatsListId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int?>("EffectID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("EffectID");

                    b.ToTable("CreatureEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureRewardList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("CreatureRewardList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClassSkill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDifficult")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5145),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Внимание",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5145)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5149),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Выживание в дикой природе",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5149)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5151),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Дедукция",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5151)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5152),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Монстрология",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5152)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5153),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Образование",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5154)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5155),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ориентирование в городе",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5155)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5156),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Передача знаний",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5157)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5158),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Тактика",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5158)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5159),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Торговля",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5160)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5161),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Этикет",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5161)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5162),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык всеобщий",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5162)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5164),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык Старшей Речи",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5164)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5165),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык краснолюдов",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5165)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5167),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ближний бой",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5167)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5168),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Борьба",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5168)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5169),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Верховая езда",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5170)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5171),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение древковым оружием",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5171)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5172),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение легкими клинками",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5173)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5174),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение мечом",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5174)
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5176),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Мореходство",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5176)
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5182),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Уклонение/Изворотливость",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5182)
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5183),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Атлетика",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5184)
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5185),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ловкость рук",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5185)
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5186),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Скрытность",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5186)
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5189),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стрельба из арбалета",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5189)
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5190),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стрельба из лука",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5191)
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5192),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Сила",
                            SourceId = 1,
                            StatId = 4,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5192)
                        },
                        new
                        {
                            Id = 28,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5193),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стойкость",
                            SourceId = 1,
                            StatId = 4,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5193)
                        },
                        new
                        {
                            Id = 29,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5195),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Азартные игры",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5195)
                        },
                        new
                        {
                            Id = 30,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5196),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Внешний вид",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5196)
                        },
                        new
                        {
                            Id = 31,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5198),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Выступление",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5198)
                        },
                        new
                        {
                            Id = 32,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5199),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Искусство",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5199)
                        },
                        new
                        {
                            Id = 33,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5200),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Лидерство",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5201)
                        },
                        new
                        {
                            Id = 34,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5202),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Обман",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5202)
                        },
                        new
                        {
                            Id = 35,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5203),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Понимание людей",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5203)
                        },
                        new
                        {
                            Id = 36,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5205),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Соблазнение",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5205)
                        },
                        new
                        {
                            Id = 37,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5211),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Убеждение",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5211)
                        },
                        new
                        {
                            Id = 38,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5212),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Харизма",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5212)
                        },
                        new
                        {
                            Id = 39,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5213),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Алхимия",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5214)
                        },
                        new
                        {
                            Id = 40,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5215),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Взлом замков",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5215)
                        },
                        new
                        {
                            Id = 41,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5217),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Знание ловушек",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5218)
                        },
                        new
                        {
                            Id = 42,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5219),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Изготовление",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5219)
                        },
                        new
                        {
                            Id = 43,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5220),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Маскировка",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5220)
                        },
                        new
                        {
                            Id = 44,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5222),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Первая помощь",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5222)
                        },
                        new
                        {
                            Id = 45,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5223),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Подделывание",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5223)
                        },
                        new
                        {
                            Id = 46,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5224),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Запугивание",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5225)
                        },
                        new
                        {
                            Id = 47,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5226),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Наведение порчи",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5226)
                        },
                        new
                        {
                            Id = 48,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5227),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Проведение ритуалов",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5228)
                        },
                        new
                        {
                            Id = 49,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5229),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Сопротивление магии",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5229)
                        },
                        new
                        {
                            Id = 50,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5230),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Сопротивление убеждению",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5230)
                        },
                        new
                        {
                            Id = 51,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5231),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Сотворение заклинаний",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5232)
                        },
                        new
                        {
                            Id = 52,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5233),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Храбрость",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5233)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlchemyId")
                        .HasColumnType("int");

                    b.Property<int>("AlchemyValue")
                        .HasColumnType("int");

                    b.Property<int>("AppearanceId")
                        .HasColumnType("int");

                    b.Property<int>("AppearanceValue")
                        .HasColumnType("int");

                    b.Property<int>("ArcheryId")
                        .HasColumnType("int");

                    b.Property<int>("ArcheryValue")
                        .HasColumnType("int");

                    b.Property<int>("ArtistryId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistryValue")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsId")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsValue")
                        .HasColumnType("int");

                    b.Property<int>("AttentionId")
                        .HasColumnType("int");

                    b.Property<int>("AttentionValue")
                        .HasColumnType("int");

                    b.Property<int>("CamouflageId")
                        .HasColumnType("int");

                    b.Property<int>("CamouflageValue")
                        .HasColumnType("int");

                    b.Property<int>("CharismaId")
                        .HasColumnType("int");

                    b.Property<int>("CharismaValue")
                        .HasColumnType("int");

                    b.Property<int>("CityOrientationId")
                        .HasColumnType("int");

                    b.Property<int>("CityOrientationValue")
                        .HasColumnType("int");

                    b.Property<int?>("ClassSkill")
                        .HasColumnType("int");

                    b.Property<int>("ClassSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("CourageId")
                        .HasColumnType("int");

                    b.Property<int>("CourageValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CrossbowMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("CrossbowMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("DeceptionId")
                        .HasColumnType("int");

                    b.Property<int>("DeceptionValue")
                        .HasColumnType("int");

                    b.Property<int>("DeductionId")
                        .HasColumnType("int");

                    b.Property<int>("DeductionValue")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<int>("EducationValue")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceId")
                        .HasColumnType("int");

                    b.Property<int>("EnduranceValue")
                        .HasColumnType("int");

                    b.Property<int>("EtiquetteId")
                        .HasColumnType("int");

                    b.Property<int>("EtiquetteValue")
                        .HasColumnType("int");

                    b.Property<int>("EvasionId")
                        .HasColumnType("int");

                    b.Property<int>("EvasionValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstAidId")
                        .HasColumnType("int");

                    b.Property<int>("FirstAidValue")
                        .HasColumnType("int");

                    b.Property<int>("ForgeryId")
                        .HasColumnType("int");

                    b.Property<int>("ForgeryValue")
                        .HasColumnType("int");

                    b.Property<int>("GamblingId")
                        .HasColumnType("int");

                    b.Property<int>("GamblingValue")
                        .HasColumnType("int");

                    b.Property<int>("IntimidationId")
                        .HasColumnType("int");

                    b.Property<int>("IntimidationValue")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeTransferId")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeTransferValue")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageValue")
                        .HasColumnType("int");

                    b.Property<int>("LeadershipId")
                        .HasColumnType("int");

                    b.Property<int>("LeadershipValue")
                        .HasColumnType("int");

                    b.Property<int>("LightBladeMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("LightBladeMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("LockpickingId")
                        .HasColumnType("int");

                    b.Property<int>("LockpickingValue")
                        .HasColumnType("int");

                    b.Property<int>("MagicResistanceId")
                        .HasColumnType("int");

                    b.Property<int>("MagicResistanceValue")
                        .HasColumnType("int");

                    b.Property<int>("ManualDexterityId")
                        .HasColumnType("int");

                    b.Property<int>("ManualDexterityValue")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturingId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturingValue")
                        .HasColumnType("int");

                    b.Property<int>("MeleeCombatId")
                        .HasColumnType("int");

                    b.Property<int>("MeleeCombatValue")
                        .HasColumnType("int");

                    b.Property<int>("MonsterologyId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterologyValue")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionId")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionResistanceId")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionResistanceValue")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionValue")
                        .HasColumnType("int");

                    b.Property<int>("PoleWeaponMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("PoleWeaponMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("PublicSpeakingId")
                        .HasColumnType("int");

                    b.Property<int>("PublicSpeakingValue")
                        .HasColumnType("int");

                    b.Property<int>("RidingId")
                        .HasColumnType("int");

                    b.Property<int>("RidingValue")
                        .HasColumnType("int");

                    b.Property<int>("RitualsId")
                        .HasColumnType("int");

                    b.Property<int>("RitualsValue")
                        .HasColumnType("int");

                    b.Property<int>("SeamanshipId")
                        .HasColumnType("int");

                    b.Property<int>("SeamanshipValue")
                        .HasColumnType("int");

                    b.Property<int>("SeductionId")
                        .HasColumnType("int");

                    b.Property<int>("SeductionValue")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingId")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingValue")
                        .HasColumnType("int");

                    b.Property<int>("StealthId")
                        .HasColumnType("int");

                    b.Property<int>("StealthValue")
                        .HasColumnType("int");

                    b.Property<int>("StrengthId")
                        .HasColumnType("int");

                    b.Property<int>("StrengthValue")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalId")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalValue")
                        .HasColumnType("int");

                    b.Property<int>("SwordsmanshipId")
                        .HasColumnType("int");

                    b.Property<int>("SwordsmanshipValue")
                        .HasColumnType("int");

                    b.Property<int>("TacticsId")
                        .HasColumnType("int");

                    b.Property<int>("TacticsValue")
                        .HasColumnType("int");

                    b.Property<int>("TradingId")
                        .HasColumnType("int");

                    b.Property<int>("TradingValue")
                        .HasColumnType("int");

                    b.Property<int>("TrapKnowledgeId")
                        .HasColumnType("int");

                    b.Property<int>("TrapKnowledgeValue")
                        .HasColumnType("int");

                    b.Property<int>("UnderstandingPeopleId")
                        .HasColumnType("int");

                    b.Property<int>("UnderstandingPeopleValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WrestlingId")
                        .HasColumnType("int");

                    b.Property<int>("WrestlingValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("FirstLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstRightSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("MainSkillId")
                        .HasColumnType("int");

                    b.Property<int>("MainSkillValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("SecondMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("SecondRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondRightSkillValue")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("ThirdMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRightSkillValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SourceId");

                    b.ToTable("SkillsTree");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Stats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5059),
                            Description = "",
                            Enabled = true,
                            Name = "Интеллект",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5059)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5062),
                            Description = "",
                            Enabled = true,
                            Name = "Реакция",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5062)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5063),
                            Description = "",
                            Enabled = true,
                            Name = "Ловкость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5063)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5064),
                            Description = "",
                            Enabled = true,
                            Name = "Телосложение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5064)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5065),
                            Description = "",
                            Enabled = true,
                            Name = "Скорость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5066)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5067),
                            Description = "",
                            Enabled = true,
                            Name = "Эмпатия",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5067)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5068),
                            Description = "",
                            Enabled = true,
                            Name = "Ремесло",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5068)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5069),
                            Description = "",
                            Enabled = true,
                            Name = "Воля",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5069)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5070),
                            Description = "",
                            Enabled = true,
                            Name = "Удача",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5071)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5071),
                            Description = "",
                            Enabled = true,
                            Name = "Энергия",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5072)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5073),
                            Description = "",
                            Enabled = true,
                            Name = "Устойчивость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5073)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5074),
                            Description = "",
                            Enabled = true,
                            Name = "Бег",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5074)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5075),
                            Description = "",
                            Enabled = true,
                            Name = "Прыжок",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5075)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5076),
                            Description = "",
                            Enabled = true,
                            Name = "Пункты Здоровья",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5077)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5077),
                            Description = "",
                            Enabled = true,
                            Name = "Выносливость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5078)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5079),
                            Description = "",
                            Enabled = true,
                            Name = "Переносимый вес",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5079)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5080),
                            Description = "",
                            Enabled = true,
                            Name = "Отдых",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5080)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5081),
                            Description = "",
                            Enabled = true,
                            Name = "Удар рукой",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5081)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5082),
                            Description = "",
                            Enabled = true,
                            Name = "Удар ногой",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5082)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.StatsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionValue")
                        .HasColumnType("int");

                    b.Property<int>("CraftsmanshipId")
                        .HasColumnType("int");

                    b.Property<int>("CraftsmanshipValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DexterityId")
                        .HasColumnType("int");

                    b.Property<int>("DexterityValue")
                        .HasColumnType("int");

                    b.Property<int>("EmpathyId")
                        .HasColumnType("int");

                    b.Property<int>("EmpathyValue")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceId")
                        .HasColumnType("int");

                    b.Property<int>("EnduranceValue")
                        .HasColumnType("int");

                    b.Property<int>("EnergyId")
                        .HasColumnType("int");

                    b.Property<int>("EnergyValue")
                        .HasColumnType("int");

                    b.Property<int>("HandStrikeId")
                        .HasColumnType("int");

                    b.Property<int>("HandStrikeValue")
                        .HasColumnType("int");

                    b.Property<int>("HealthPointsId")
                        .HasColumnType("int");

                    b.Property<int>("HealthPointsValue")
                        .HasColumnType("int");

                    b.Property<int>("IntellectId")
                        .HasColumnType("int");

                    b.Property<int>("IntellectValue")
                        .HasColumnType("int");

                    b.Property<int>("JumpingId")
                        .HasColumnType("int");

                    b.Property<int>("JumpingValue")
                        .HasColumnType("int");

                    b.Property<int>("KickId")
                        .HasColumnType("int");

                    b.Property<int>("KickValue")
                        .HasColumnType("int");

                    b.Property<int>("LuckId")
                        .HasColumnType("int");

                    b.Property<int>("LuckValue")
                        .HasColumnType("int");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionValue")
                        .HasColumnType("int");

                    b.Property<int>("ResilienceId")
                        .HasColumnType("int");

                    b.Property<int>("ResilienceValue")
                        .HasColumnType("int");

                    b.Property<int>("RestId")
                        .HasColumnType("int");

                    b.Property<int>("RestValue")
                        .HasColumnType("int");

                    b.Property<int>("RunningId")
                        .HasColumnType("int");

                    b.Property<int>("RunningValue")
                        .HasColumnType("int");

                    b.Property<int>("SpeedId")
                        .HasColumnType("int");

                    b.Property<int>("SpeedValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeightId")
                        .HasColumnType("int");

                    b.Property<int>("WeightValue")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerId")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StatsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Headline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Headlines");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.BlueprintComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("BlueprintId")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlueprintId");

                    b.HasIndex("ComponentId");

                    b.ToTable("BlueprintComponentList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2,
                            BlueprintId = 50,
                            ComponentId = 9
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1,
                            BlueprintId = 50,
                            ComponentId = 22
                        },
                        new
                        {
                            Id = 3,
                            Amount = 6,
                            BlueprintId = 50,
                            ComponentId = 13
                        },
                        new
                        {
                            Id = 4,
                            Amount = 3,
                            BlueprintId = 50,
                            ComponentId = 15
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.FormulaSubstanceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("FormulaId")
                        .HasColumnType("int");

                    b.Property<int>("SubstanceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("FormulaId");

                    b.ToTable("FormulaComponentList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1,
                            FormulaId = 51,
                            SubstanceType = 3
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1,
                            FormulaId = 51,
                            SubstanceType = 4
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailabilityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("ItemBases");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBaseEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDealDamage")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("ItemBaseEffectList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChancePercent = 75,
                            Damage = "",
                            EffectId = 2,
                            IsDealDamage = false,
                            ItemBaseId = 2
                        },
                        new
                        {
                            Id = 2,
                            ChancePercent = 0,
                            Damage = "2к6+2",
                            EffectId = 2,
                            IsDealDamage = true,
                            ItemBaseId = 1
                        },
                        new
                        {
                            Id = 3,
                            ChancePercent = 0,
                            Damage = "",
                            EffectId = 1,
                            IsDealDamage = false,
                            ItemBaseId = 54
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.ServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LogMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceLogs");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CheckDC")
                        .HasColumnType("int");

                    b.Property<int>("ConcetrationEnduranceCost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DangerInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceCost")
                        .HasColumnType("int");

                    b.Property<bool>("IsConcetration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDruidSpell")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPriestSpell")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<string>("SourceTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellLevel")
                        .HasColumnType("int");

                    b.Property<int>("SpellType")
                        .HasColumnType("int");

                    b.Property<string>("SpellTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WithdrawalCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellSkillProtectionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellSkillProtectionList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Users.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemember")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.ToTable("AlchemicalItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailabilityType = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5503),
                            Description = "Прикладывание к ране обезболивающих трав притупляет боль, снижая штраф от критических ранений и состояния «при смерти» на 2. Эффект действует 2d10 раундов.",
                            Enabled = true,
                            Name = "Обезболивающие травы",
                            Price = 12,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5504),
                            Weight = 0.10000000000000001,
                            ItemType = 0
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Armor", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AmountOfEnhancements")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentType")
                        .HasColumnType("int");

                    b.Property<int>("ItemOriginType")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int>("Stiffness")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Armors");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5521),
                            Description = "Вердонские лучники — крепкие ребята. Обычно они не слишком усердствуют с бронёй — дриады-то всёравно в щели между доспехами дротик-другой засадят. Зато они носят хорошие плотные капюшоны, расшитые сине-чёрным стрельчатым узором.",
                            Enabled = true,
                            Name = "Капюшон вердэнского лучника",
                            Price = 100,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5522),
                            Weight = 0.5,
                            AmountOfEnhancements = 1,
                            EquipmentType = 1,
                            ItemOriginType = 1,
                            ItemType = 0,
                            Reliability = 3,
                            Stiffness = 0,
                            Type = 1
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AdditionalPayment")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<float>("TimeSpend")
                        .HasColumnType("real");

                    b.ToTable("Blueprints");

                    b.HasData(
                        new
                        {
                            Id = 50,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5790),
                            Description = "",
                            Enabled = true,
                            Name = "Капюшон вердэнского лучника",
                            Price = 150,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5790),
                            Weight = 0.0,
                            AdditionalPayment = 70,
                            Complexity = 10,
                            ItemType = 0,
                            TimeSpend = 3f
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlchemical")
                        .HasColumnType("bit");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("SubstanceType")
                        .HasColumnType("int");

                    b.Property<string>("WhereToFind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Components");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AvailabilityType = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5575),
                            Description = "",
                            Enabled = true,
                            Name = "Пепел",
                            Price = 1,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5575),
                            Weight = 0.10000000000000001,
                            Amount = "1к10",
                            Complexity = 10,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Костер и Сгоревшие предметы"
                        },
                        new
                        {
                            Id = 4,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5586),
                            Description = "",
                            Enabled = true,
                            Name = "Уголь",
                            Price = 1,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5586),
                            Weight = 0.10000000000000001,
                            Amount = "1к10",
                            Complexity = 14,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Костер, Горы или Под землей"
                        },
                        new
                        {
                            Id = 5,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5592),
                            Description = "",
                            Enabled = true,
                            Name = "Хлопок",
                            Price = 1,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5593),
                            Weight = 0.10000000000000001,
                            Amount = "1к10",
                            Complexity = 12,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Поля и Плантации"
                        },
                        new
                        {
                            Id = 6,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5595),
                            Description = "",
                            Enabled = true,
                            Name = "Двойное полотно",
                            Price = 22,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5596),
                            Weight = 0.10000000000000001,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 7,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5599),
                            Description = "",
                            Enabled = true,
                            Name = "Стекло",
                            Price = 5,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5600),
                            Weight = 0.5,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается"
                        },
                        new
                        {
                            Id = 8,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5605),
                            Description = "",
                            Enabled = true,
                            Name = "Укрепленное дерево",
                            Price = 16,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5605),
                            Weight = 0.10000000000000001,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 9,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5610),
                            Description = "",
                            Enabled = true,
                            Name = "Полотно",
                            Price = 9,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5610),
                            Weight = 0.10000000000000001,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается или Изготавливается"
                        },
                        new
                        {
                            Id = 10,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5612),
                            Description = "",
                            Enabled = true,
                            Name = "Масло",
                            Price = 3,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5612),
                            Weight = 0.10000000000000001,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 11,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5638),
                            Description = "",
                            Enabled = true,
                            Name = "Смлоа",
                            Price = 2,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5639),
                            Weight = 0.10000000000000001,
                            Amount = "1к6",
                            Complexity = 10,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Леса"
                        },
                        new
                        {
                            Id = 12,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5641),
                            Description = "",
                            Enabled = true,
                            Name = "Шелк",
                            Price = 50,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5641),
                            Weight = 0.10000000000000001,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается"
                        },
                        new
                        {
                            Id = 13,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5643),
                            Description = "",
                            Enabled = true,
                            Name = "Нитки",
                            Price = 3,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5644),
                            Weight = 0.10000000000000001,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается или Изготавливается"
                        },
                        new
                        {
                            Id = 14,
                            AvailabilityType = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5646),
                            Description = "",
                            Enabled = true,
                            Name = "Древесина",
                            Price = 3,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5646),
                            Weight = 1.0,
                            Amount = "2к6",
                            Complexity = 8,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Леса"
                        },
                        new
                        {
                            Id = 15,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5648),
                            Description = "",
                            Enabled = true,
                            Name = "Воск",
                            Price = 2,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5648),
                            Weight = 0.10000000000000001,
                            Amount = "1к6",
                            Complexity = 12,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Леса и Поля"
                        },
                        new
                        {
                            Id = 16,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5651),
                            Description = "",
                            Enabled = true,
                            Name = "Кости животных",
                            Price = 8,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5651),
                            Weight = 4.0,
                            Amount = "Варьируется",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Чудовища и Животные"
                        },
                        new
                        {
                            Id = 17,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5653),
                            Description = "",
                            Enabled = true,
                            Name = "Коровья шкура",
                            Price = 10,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5653),
                            Weight = 5.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается"
                        },
                        new
                        {
                            Id = 18,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5655),
                            Description = "",
                            Enabled = true,
                            Name = "Кожа драконида",
                            Price = 58,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5656),
                            Weight = 5.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 19,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5659),
                            Description = "",
                            Enabled = true,
                            Name = "Чешуя драконида",
                            Price = 30,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5659),
                            Weight = 5.0,
                            Amount = "1к6",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Виверны"
                        },
                        new
                        {
                            Id = 20,
                            AvailabilityType = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5661),
                            Description = "",
                            Enabled = true,
                            Name = "Перья",
                            Price = 4,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5661),
                            Weight = 0.10000000000000001,
                            Amount = "1к6",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Птицы"
                        },
                        new
                        {
                            Id = 21,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5663),
                            Description = "",
                            Enabled = true,
                            Name = "Укрепленная кожа",
                            Price = 48,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5663),
                            Weight = 3.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 22,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5666),
                            Description = "",
                            Enabled = true,
                            Name = "Кожа",
                            Price = 28,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5666),
                            Weight = 2.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается или Изготавливается"
                        },
                        new
                        {
                            Id = 23,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5668),
                            Description = "",
                            Enabled = true,
                            Name = "Лирийская кожа",
                            Price = 60,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5668),
                            Weight = 2.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 24,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5670),
                            Description = "",
                            Enabled = true,
                            Name = "Волчья шкура",
                            Price = 14,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5671),
                            Weight = 3.0,
                            Amount = "3",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Волки"
                        },
                        new
                        {
                            Id = 25,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5673),
                            Description = "",
                            Enabled = true,
                            Name = "Чернящее масло",
                            Price = 24,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5673),
                            Weight = 0.10000000000000001,
                            Amount = "1к6",
                            Complexity = 16,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Леса"
                        },
                        new
                        {
                            Id = 26,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5675),
                            Description = "",
                            Enabled = true,
                            Name = "Масло из дрейка",
                            Price = 45,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5675),
                            Weight = 0.10000000000000001,
                            Amount = "1к6",
                            Complexity = 16,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Реки и Побережье"
                        },
                        new
                        {
                            Id = 27,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5678),
                            Description = "",
                            Enabled = true,
                            Name = "Эфирная смазка",
                            Price = 8,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5678),
                            Weight = 0.10000000000000001,
                            Amount = "1к10",
                            Complexity = 14,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Леса и Поля"
                        },
                        new
                        {
                            Id = 28,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5681),
                            Description = "",
                            Enabled = true,
                            Name = "Травильная кислота",
                            Price = 2,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5681),
                            Weight = 0.10000000000000001,
                            Amount = "1к10",
                            Complexity = 14,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Пещеры и Горы"
                        },
                        new
                        {
                            Id = 29,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5684),
                            Description = "",
                            Enabled = true,
                            Name = "Пятая эссенция",
                            Price = 82,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5685),
                            Weight = 0.10000000000000001,
                            Amount = "Варьируется",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Места силы, Маги и Бесы"
                        },
                        new
                        {
                            Id = 30,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5688),
                            Description = "",
                            Enabled = true,
                            Name = "Огров воск",
                            Price = 10,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5688),
                            Weight = 0.10000000000000001,
                            Amount = "1к10",
                            Complexity = 14,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Пещеры"
                        },
                        new
                        {
                            Id = 31,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5690),
                            Description = "",
                            Enabled = true,
                            Name = "Точильный порошок",
                            Price = 32,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5691),
                            Weight = 0.10000000000000001,
                            Amount = "1к6",
                            Complexity = 16,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Горы и Пещеры"
                        },
                        new
                        {
                            Id = 32,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5693),
                            Description = "",
                            Enabled = true,
                            Name = "Дубильные травы",
                            Price = 3,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5693),
                            Weight = 0.10000000000000001,
                            Amount = "1к10",
                            Complexity = 14,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Поля и Леса"
                        },
                        new
                        {
                            Id = 33,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5696),
                            Description = "",
                            Enabled = true,
                            Name = "Темное железо",
                            Price = 52,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5696),
                            Weight = 1.5,
                            Amount = "1к6",
                            Complexity = 18,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Горы и Под землей"
                        },
                        new
                        {
                            Id = 34,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5698),
                            Description = "",
                            Enabled = true,
                            Name = "Темная сталь",
                            Price = 82,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5699),
                            Weight = 1.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 35,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5701),
                            Description = "",
                            Enabled = true,
                            Name = "Двимерит",
                            Price = 240,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5701),
                            Weight = 1.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 36,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5703),
                            Description = "",
                            Enabled = true,
                            Name = "Самоцветы",
                            Price = 100,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5704),
                            Weight = 0.10000000000000001,
                            Amount = "1к6/2",
                            Complexity = 24,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Горы и Под землей"
                        },
                        new
                        {
                            Id = 37,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5736),
                            Description = "",
                            Enabled = true,
                            Name = "Совершенный самоцвет",
                            Price = 1000,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5736),
                            Weight = 0.10000000000000001,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 38,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5740),
                            Description = "",
                            Enabled = true,
                            Name = "Светящаяся руда",
                            Price = 80,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5740),
                            Weight = 1.0,
                            Amount = "1к6/2",
                            Complexity = 20,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Горы и Под землей"
                        },
                        new
                        {
                            Id = 39,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5742),
                            Description = "",
                            Enabled = true,
                            Name = "Золото",
                            Price = 85,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5743),
                            Weight = 1.0,
                            Amount = "1к6/2",
                            Complexity = 18,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Горы и Под землей"
                        },
                        new
                        {
                            Id = 40,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5745),
                            Description = "",
                            Enabled = true,
                            Name = "Железо",
                            Price = 30,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5745),
                            Weight = 1.5,
                            Amount = "1к6",
                            Complexity = 16,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Горы и Под землей"
                        },
                        new
                        {
                            Id = 41,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5747),
                            Description = "",
                            Enabled = true,
                            Name = "Махакамский двимерит",
                            Price = 300,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5748),
                            Weight = 1.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 42,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5750),
                            Description = "",
                            Enabled = true,
                            Name = "Махакамская сталь",
                            Price = 114,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5750),
                            Weight = 1.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 43,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5752),
                            Description = "",
                            Enabled = true,
                            Name = "Метеорит",
                            Price = 98,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5753),
                            Weight = 1.0,
                            Amount = "1к6/2",
                            Complexity = 24,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Где угодно на поверхности земли"
                        },
                        new
                        {
                            Id = 44,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5755),
                            Description = "",
                            Enabled = true,
                            Name = "Речная глина",
                            Price = 5,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5755),
                            Weight = 1.5,
                            Amount = "1к6",
                            Complexity = 14,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Реки и Берега реки"
                        },
                        new
                        {
                            Id = 45,
                            AvailabilityType = 4,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5757),
                            Description = "",
                            Enabled = true,
                            Name = "Серебро",
                            Price = 72,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5758),
                            Weight = 1.0,
                            Amount = "1к6/2",
                            Complexity = 16,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Горы и Под землей"
                        },
                        new
                        {
                            Id = 46,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5760),
                            Description = "",
                            Enabled = true,
                            Name = "Сталь",
                            Price = 48,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5760),
                            Weight = 1.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 47,
                            AvailabilityType = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5763),
                            Description = "",
                            Enabled = true,
                            Name = "Камень",
                            Price = 4,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5763),
                            Weight = 2.0,
                            Amount = "2к6",
                            Complexity = 8,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Где угодно"
                        },
                        new
                        {
                            Id = 48,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5765),
                            Description = "",
                            Enabled = true,
                            Name = "Третогорская сталь",
                            Price = 64,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5765),
                            Weight = 1.0,
                            Amount = "",
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Покупается и Изготавливается"
                        },
                        new
                        {
                            Id = 49,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5768),
                            Description = "",
                            Enabled = true,
                            Name = "Зерриканская смесь",
                            Price = 30,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5768),
                            Weight = 0.10000000000000001,
                            Amount = "1к6/2",
                            Complexity = 18,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = "Горы и Под землей"
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AdditionalPayment")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<float>("TimeSpend")
                        .HasColumnType("real");

                    b.ToTable("Formulas");

                    b.HasData(
                        new
                        {
                            Id = 51,
                            AvailabilityType = 1,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5826),
                            Description = "testFormula",
                            Enabled = true,
                            Name = "testFormula",
                            Price = 0,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5826),
                            Weight = 1.0,
                            AdditionalPayment = 1,
                            Complexity = 1,
                            ItemType = 0,
                            TimeSpend = 0f
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Item", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("StealthType")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 52,
                            AvailabilityType = 0,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5853),
                            Description = "Всегда с собой таскай верёвку.Я не раз в ямы проваливался, да и на скалы карабкаться приходилось. Ситуаций, где нужна верёвка, предостаточно",
                            Enabled = true,
                            Name = "Веревка (20 метров)",
                            Price = 20,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5853),
                            Weight = 1.5,
                            ItemType = 0,
                            StealthType = 0,
                            Type = 0
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Tool", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("StealthType")
                        .HasColumnType("int");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            Id = 53,
                            AvailabilityType = 3,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5897),
                            Description = "Позволяют создавать алхимические составы",
                            Enabled = true,
                            Name = "Инструменты алхимика",
                            Price = 80,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5897),
                            Weight = 3.0,
                            ItemType = 0,
                            StealthType = 2
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Weapon", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfEnhancements")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentType")
                        .HasColumnType("int");

                    b.Property<int>("Grip")
                        .HasColumnType("int");

                    b.Property<bool>("IsAmmunition")
                        .HasColumnType("bit");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("StealthType")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasIndex("SkillId");

                    b.ToTable("Weapons");

                    b.HasData(
                        new
                        {
                            Id = 54,
                            AvailabilityType = 2,
                            CreateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5911),
                            Description = "",
                            Enabled = true,
                            Name = "Стилет",
                            Price = 275,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 28, 14, 51, 0, 109, DateTimeKind.Local).AddTicks(5911),
                            Weight = 0.5,
                            Accuracy = 1,
                            AmountOfEnhancements = 1,
                            Damage = "1к6",
                            Distance = 0,
                            EquipmentType = 0,
                            Grip = 1,
                            IsAmmunition = false,
                            ItemType = 0,
                            Reliability = 5,
                            StealthType = 4,
                            Type = 4
                        });
                });

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Effect", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.ServicePrice", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Abilitiy", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("Abilities")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Creature");

                    b.Navigation("Race");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("Attacks")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Creature");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.AttackEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", "Attack")
                        .WithMany("AttackEffectLists")
                        .HasForeignKey("AttackId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.Navigation("Attack");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Class", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsList", "SkillsList")
                        .WithMany()
                        .HasForeignKey("SkillsListId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.StatsList", "StatsList")
                        .WithMany()
                        .HasForeignKey("StatsListId");

                    b.Navigation("SkillsList");

                    b.Navigation("Source");

                    b.Navigation("StatsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("CreatureEffectLists")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectID");

                    b.Navigation("Creature");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureRewardList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("CreatureRewardLists")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", "ItemBase")
                        .WithMany("CreatureRewardLists")
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("Creature");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Race", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsTree", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Class");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Stat", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Headline", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.BlueprintComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", "Blueprint")
                        .WithMany("BlueprintComponentLists")
                        .HasForeignKey("BlueprintId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany("BlueprintComponentLists")
                        .HasForeignKey("ComponentId");

                    b.Navigation("Blueprint");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.FormulaSubstanceList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", null)
                        .WithMany("FormulaSubstanceList")
                        .HasForeignKey("ComponentId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Formula", "Formula")
                        .WithMany("FormulaSubstanceList")
                        .HasForeignKey("FormulaId");

                    b.Navigation("Formula");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBaseEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", "ItemBase")
                        .WithMany("ItemBaseEffectLists")
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("Effect");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", "Spell")
                        .WithMany("SpellComponentLists")
                        .HasForeignKey("SpellId");

                    b.Navigation("Component");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellSkillProtectionList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", "Spell")
                        .WithMany("SpellSkillProtectionLists")
                        .HasForeignKey("SpellId");

                    b.Navigation("Effect");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Armor", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Armor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Component", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Formula", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Item", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Item", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Tool", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Tool", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Weapon", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Weapon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.Navigation("AttackEffectLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Attacks");

                    b.Navigation("CreatureEffectLists");

                    b.Navigation("CreatureRewardLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.Navigation("CreatureRewardLists");

                    b.Navigation("ItemBaseEffectLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.Navigation("SpellComponentLists");

                    b.Navigation("SpellSkillProtectionLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.Navigation("BlueprintComponentLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.Navigation("BlueprintComponentLists");

                    b.Navigation("FormulaSubstanceList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.Navigation("FormulaSubstanceList");
                });
#pragma warning restore 612, 618
        }
    }
}
