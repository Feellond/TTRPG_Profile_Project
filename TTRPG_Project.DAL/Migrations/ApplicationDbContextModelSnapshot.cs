// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TTRPG_Project.DAL.Data;

#nullable disable

namespace TTRPG_Project.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.Property<int>("CreaturesId")
                        .HasColumnType("int");

                    b.Property<int>("SpellsId")
                        .HasColumnType("int");

                    b.HasKey("CreaturesId", "SpellsId");

                    b.HasIndex("SpellsId");

                    b.ToTable("CreatureSpell");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Effects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2974),
                            Description = "",
                            Enabled = true,
                            Name = "Незаметное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2974)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2975),
                            Description = "",
                            Enabled = true,
                            Name = "Кровопускающее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2975)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2976),
                            Description = "",
                            Enabled = true,
                            Name = "Пробивающее броню",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2977)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2978),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(1)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2978)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2979),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(2)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2979)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2980),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(3)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2981)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2982),
                            Description = "",
                            Enabled = true,
                            Name = "Метеоритное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2982)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2983),
                            Description = "",
                            Enabled = true,
                            Name = "Длинное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2983)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2984),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(1)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2984)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2985),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(2)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2986)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2987),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(3)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2987)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2988),
                            Description = "",
                            Enabled = true,
                            Name = "Сокрушающая сила",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2988)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2989),
                            Description = "",
                            Enabled = true,
                            Name = "Серебрянное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2989)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2990),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(1)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2990)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2991),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(2)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2992)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2993),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(3)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2993)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2994),
                            Description = "",
                            Enabled = true,
                            Name = "Улучшенное пробивание брони",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2994)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2996),
                            Description = "",
                            Enabled = true,
                            Name = "Захватное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2996)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2997),
                            Description = "",
                            Enabled = true,
                            Name = "Ловящий лезвия",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2997)
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2998),
                            Description = "",
                            Enabled = true,
                            Name = "Магические путы",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2999)
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3000),
                            Description = "",
                            Enabled = true,
                            Name = "Медленно перезаряжающееся",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3000)
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3001),
                            Description = "",
                            Enabled = true,
                            Name = "Несмертельное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3001)
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3002),
                            Description = "",
                            Enabled = true,
                            Name = "Опутывающее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3002)
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3003),
                            Description = "",
                            Enabled = true,
                            Name = "Парирующее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3004)
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3005),
                            Description = "",
                            Enabled = true,
                            Name = "Разрушающее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3005)
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3006),
                            Description = "",
                            Enabled = true,
                            Name = "Рукопашное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3006)
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3007),
                            Description = "",
                            Enabled = true,
                            Name = "Расчетная перезарядка",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3007)
                        },
                        new
                        {
                            Id = 28,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3008),
                            Description = "",
                            Enabled = true,
                            Name = "Улучшенное фокусирующее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3009)
                        },
                        new
                        {
                            Id = 29,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3009),
                            Description = "",
                            Enabled = true,
                            Name = "Устанавливаемое",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3010)
                        },
                        new
                        {
                            Id = 30,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3011),
                            Description = "",
                            Enabled = true,
                            Name = "Шприц",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3011)
                        },
                        new
                        {
                            Id = 31,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3012),
                            Description = "",
                            Enabled = true,
                            Name = "Закрывает все тело",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3012)
                        },
                        new
                        {
                            Id = 32,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3013),
                            Description = "",
                            Enabled = true,
                            Name = "Огнеупорный",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3013)
                        },
                        new
                        {
                            Id = 33,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3014),
                            Description = "",
                            Enabled = true,
                            Name = "Ограничение зрения",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3015)
                        },
                        new
                        {
                            Id = 34,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3016),
                            Description = "",
                            Enabled = true,
                            Name = "Полное укрытие",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3016)
                        },
                        new
                        {
                            Id = 35,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3017),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(Д)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3017)
                        },
                        new
                        {
                            Id = 36,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3018),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(Р)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3018)
                        },
                        new
                        {
                            Id = 37,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3019),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(К)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3020)
                        },
                        new
                        {
                            Id = 38,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3022),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(С)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3022)
                        },
                        new
                        {
                            Id = 39,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3023),
                            Description = "",
                            Enabled = true,
                            Name = "Горение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3023)
                        },
                        new
                        {
                            Id = 40,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3024),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентация",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3024)
                        },
                        new
                        {
                            Id = 41,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3025),
                            Description = "",
                            Enabled = true,
                            Name = "Отравление",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3026)
                        },
                        new
                        {
                            Id = 42,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3027),
                            Description = "",
                            Enabled = true,
                            Name = "Кровотечение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3027)
                        },
                        new
                        {
                            Id = 43,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3028),
                            Description = "",
                            Enabled = true,
                            Name = "Замораживание",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3028)
                        },
                        new
                        {
                            Id = 44,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3029),
                            Description = "",
                            Enabled = true,
                            Name = "Ошеломление",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3029)
                        },
                        new
                        {
                            Id = 45,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3030),
                            Description = "",
                            Enabled = true,
                            Name = "Опьянение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3030)
                        },
                        new
                        {
                            Id = 46,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3031),
                            Description = "",
                            Enabled = true,
                            Name = "Галлюцинации",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3032)
                        },
                        new
                        {
                            Id = 47,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3033),
                            Description = "",
                            Enabled = true,
                            Name = "Тошнота",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3033)
                        },
                        new
                        {
                            Id = 48,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3034),
                            Description = "",
                            Enabled = true,
                            Name = "Удушье",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3034)
                        },
                        new
                        {
                            Id = 49,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3035),
                            Description = "",
                            Enabled = true,
                            Name = "Слепота",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3035)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.ServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("ServicePrices");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2156),
                            Enabled = true,
                            Name = "Базовая книга",
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2171)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2175),
                            Enabled = true,
                            Name = "Хоумбрю",
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2175)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Abilitiy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("RaceId");

                    b.HasIndex("SourceId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackEffectListId")
                        .HasColumnType("int");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("int");

                    b.Property<int>("AttackType")
                        .HasColumnType("int");

                    b.Property<int>("BaseAttack")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("SourceId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.AttackEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttackId")
                        .HasColumnType("int");

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDealDamage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("EffectId");

                    b.ToTable("AttackEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultMagicAbilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Energy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsBase")
                        .HasColumnType("int");

                    b.Property<int>("BlockBase")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationSkill")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EvasionBase")
                        .HasColumnType("int");

                    b.Property<string>("GroupSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HabitatPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Intellect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoneyReward")
                        .HasColumnType("int");

                    b.Property<string>("MonsterLoreInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonsterLoreSkill")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Regeneration")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsListId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("SpellResistBase")
                        .HasColumnType("int");

                    b.Property<int?>("StatsListId")
                        .HasColumnType("int");

                    b.Property<string>("SuperstitionsInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SkillsListId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatsListId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int?>("EffectID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("EffectID");

                    b.ToTable("CreatureEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureRewardList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("CreatureRewardList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClassSkill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDifficult")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2477),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Внимание",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2478)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2481),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Выживание в дикой природе",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2482)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2484),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Дедукция",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2484)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2486),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Монстрология",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2486)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2487),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Образование",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2487)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2489),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ориентирование в городе",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2489)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2490),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Передача знаний",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2490)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2492),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Тактика",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2492)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2493),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Торговля",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2493)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2495),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Этикет",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2495)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2496),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык всеобщий",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2497)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2498),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык Старшей Речи",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2498)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2499),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык краснолюдов",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2500)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2501),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ближний бой",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2501)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2502),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Борьба",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2503)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2504),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Верховая езда",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2504)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2506),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение древковым оружием",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2506)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2507),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение легкими клинками",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2672)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2674),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение мечом",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2675)
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2676),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Мореходство",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2676)
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2678),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Уклонение/Изворотливость",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2678)
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2679),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Атлетика",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2680)
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2681),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ловкость рук",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2681)
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2845),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Скрытность",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2845)
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2847),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стрельба из арбалета",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2847)
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2848),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стрельба из лука",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2848)
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2850),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Сила",
                            SourceId = 1,
                            StatId = 4,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2850)
                        },
                        new
                        {
                            Id = 28,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2851),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стойкость",
                            SourceId = 1,
                            StatId = 4,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2852)
                        },
                        new
                        {
                            Id = 29,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2853),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Азартные игры",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2853)
                        },
                        new
                        {
                            Id = 30,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2854),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Внешний вид",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2855)
                        },
                        new
                        {
                            Id = 31,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2856),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Выступление",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2856)
                        },
                        new
                        {
                            Id = 32,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2857),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Искусство",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2858)
                        },
                        new
                        {
                            Id = 33,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2859),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Лидерство",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2859)
                        },
                        new
                        {
                            Id = 34,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2860),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Обман",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2861)
                        },
                        new
                        {
                            Id = 35,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2864),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Понимание людей",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2865)
                        },
                        new
                        {
                            Id = 36,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2866),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Соблазнение",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2866)
                        },
                        new
                        {
                            Id = 37,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2867),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Убеждение",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2868)
                        },
                        new
                        {
                            Id = 38,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2869),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Харизма",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2870)
                        },
                        new
                        {
                            Id = 39,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2871),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Алхимия",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2871)
                        },
                        new
                        {
                            Id = 40,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2872),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Взлом замков",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2873)
                        },
                        new
                        {
                            Id = 41,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2874),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Знание ловушек",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2874)
                        },
                        new
                        {
                            Id = 42,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2923),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Изготовление",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2924)
                        },
                        new
                        {
                            Id = 43,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2926),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Маскировка",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2926)
                        },
                        new
                        {
                            Id = 44,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2927),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Первая помощь",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2928)
                        },
                        new
                        {
                            Id = 45,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2929),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Подделывание",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2929)
                        },
                        new
                        {
                            Id = 46,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2930),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Запугивание",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2931)
                        },
                        new
                        {
                            Id = 47,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2932),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Наведение порчи",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2932)
                        },
                        new
                        {
                            Id = 48,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2934),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Проведение ритуалов",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2934)
                        },
                        new
                        {
                            Id = 49,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2935),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Сопротивление магии",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2935)
                        },
                        new
                        {
                            Id = 50,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2937),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Сопротивление убеждению",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2937)
                        },
                        new
                        {
                            Id = 51,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2941),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Сотворение заклинаний",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2941)
                        },
                        new
                        {
                            Id = 52,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2942),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Храбрость",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2943)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlchemyId")
                        .HasColumnType("int");

                    b.Property<int>("AlchemyValue")
                        .HasColumnType("int");

                    b.Property<int>("AppearanceId")
                        .HasColumnType("int");

                    b.Property<int>("AppearanceValue")
                        .HasColumnType("int");

                    b.Property<int>("ArcheryId")
                        .HasColumnType("int");

                    b.Property<int>("ArcheryValue")
                        .HasColumnType("int");

                    b.Property<int>("ArtistryId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistryValue")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsId")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsValue")
                        .HasColumnType("int");

                    b.Property<int>("AttentionId")
                        .HasColumnType("int");

                    b.Property<int>("AttentionValue")
                        .HasColumnType("int");

                    b.Property<int>("CamouflageId")
                        .HasColumnType("int");

                    b.Property<int>("CamouflageValue")
                        .HasColumnType("int");

                    b.Property<int>("CharismaId")
                        .HasColumnType("int");

                    b.Property<int>("CharismaValue")
                        .HasColumnType("int");

                    b.Property<int>("CityOrientationId")
                        .HasColumnType("int");

                    b.Property<int>("CityOrientationValue")
                        .HasColumnType("int");

                    b.Property<int?>("ClassSkill")
                        .HasColumnType("int");

                    b.Property<int>("ClassSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("CourageId")
                        .HasColumnType("int");

                    b.Property<int>("CourageValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CrossbowMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("CrossbowMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("DeceptionId")
                        .HasColumnType("int");

                    b.Property<int>("DeceptionValue")
                        .HasColumnType("int");

                    b.Property<int>("DeductionId")
                        .HasColumnType("int");

                    b.Property<int>("DeductionValue")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<int>("EducationValue")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceId")
                        .HasColumnType("int");

                    b.Property<int>("EnduranceValue")
                        .HasColumnType("int");

                    b.Property<int>("EtiquetteId")
                        .HasColumnType("int");

                    b.Property<int>("EtiquetteValue")
                        .HasColumnType("int");

                    b.Property<int>("EvasionId")
                        .HasColumnType("int");

                    b.Property<int>("EvasionValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstAidId")
                        .HasColumnType("int");

                    b.Property<int>("FirstAidValue")
                        .HasColumnType("int");

                    b.Property<int>("ForgeryId")
                        .HasColumnType("int");

                    b.Property<int>("ForgeryValue")
                        .HasColumnType("int");

                    b.Property<int>("GamblingId")
                        .HasColumnType("int");

                    b.Property<int>("GamblingValue")
                        .HasColumnType("int");

                    b.Property<int>("IntimidationId")
                        .HasColumnType("int");

                    b.Property<int>("IntimidationValue")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeTransferId")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeTransferValue")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageValue")
                        .HasColumnType("int");

                    b.Property<int>("LeadershipId")
                        .HasColumnType("int");

                    b.Property<int>("LeadershipValue")
                        .HasColumnType("int");

                    b.Property<int>("LightBladeMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("LightBladeMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("LockpickingId")
                        .HasColumnType("int");

                    b.Property<int>("LockpickingValue")
                        .HasColumnType("int");

                    b.Property<int>("MagicResistanceId")
                        .HasColumnType("int");

                    b.Property<int>("MagicResistanceValue")
                        .HasColumnType("int");

                    b.Property<int>("ManualDexterityId")
                        .HasColumnType("int");

                    b.Property<int>("ManualDexterityValue")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturingId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturingValue")
                        .HasColumnType("int");

                    b.Property<int>("MeleeCombatId")
                        .HasColumnType("int");

                    b.Property<int>("MeleeCombatValue")
                        .HasColumnType("int");

                    b.Property<int>("MonsterologyId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterologyValue")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionId")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionResistanceId")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionResistanceValue")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionValue")
                        .HasColumnType("int");

                    b.Property<int>("PoleWeaponMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("PoleWeaponMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("PublicSpeakingId")
                        .HasColumnType("int");

                    b.Property<int>("PublicSpeakingValue")
                        .HasColumnType("int");

                    b.Property<int>("RidingId")
                        .HasColumnType("int");

                    b.Property<int>("RidingValue")
                        .HasColumnType("int");

                    b.Property<int>("RitualsId")
                        .HasColumnType("int");

                    b.Property<int>("RitualsValue")
                        .HasColumnType("int");

                    b.Property<int>("SeamanshipId")
                        .HasColumnType("int");

                    b.Property<int>("SeamanshipValue")
                        .HasColumnType("int");

                    b.Property<int>("SeductionId")
                        .HasColumnType("int");

                    b.Property<int>("SeductionValue")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingId")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingValue")
                        .HasColumnType("int");

                    b.Property<int>("StealthId")
                        .HasColumnType("int");

                    b.Property<int>("StealthValue")
                        .HasColumnType("int");

                    b.Property<int>("StrengthId")
                        .HasColumnType("int");

                    b.Property<int>("StrengthValue")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalId")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalValue")
                        .HasColumnType("int");

                    b.Property<int>("SwordsmanshipId")
                        .HasColumnType("int");

                    b.Property<int>("SwordsmanshipValue")
                        .HasColumnType("int");

                    b.Property<int>("TacticsId")
                        .HasColumnType("int");

                    b.Property<int>("TacticsValue")
                        .HasColumnType("int");

                    b.Property<int>("TradingId")
                        .HasColumnType("int");

                    b.Property<int>("TradingValue")
                        .HasColumnType("int");

                    b.Property<int>("TrapKnowledgeId")
                        .HasColumnType("int");

                    b.Property<int>("TrapKnowledgeValue")
                        .HasColumnType("int");

                    b.Property<int>("UnderstandingPeopleId")
                        .HasColumnType("int");

                    b.Property<int>("UnderstandingPeopleValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WrestlingId")
                        .HasColumnType("int");

                    b.Property<int>("WrestlingValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("FirstLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstRightSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("MainSkillId")
                        .HasColumnType("int");

                    b.Property<int>("MainSkillValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("SecondMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("SecondRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondRightSkillValue")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("ThirdMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRightSkillValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SourceId");

                    b.ToTable("SkillsTree");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Stats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2432),
                            Description = "",
                            Enabled = true,
                            Name = "Интеллект",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2432)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2435),
                            Description = "",
                            Enabled = true,
                            Name = "Реакция",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2436)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2437),
                            Description = "",
                            Enabled = true,
                            Name = "Ловкость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2437)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2438),
                            Description = "",
                            Enabled = true,
                            Name = "Телосложение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2439)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2440),
                            Description = "",
                            Enabled = true,
                            Name = "Скорость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2440)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2441),
                            Description = "",
                            Enabled = true,
                            Name = "Эмпатия",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2441)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2442),
                            Description = "",
                            Enabled = true,
                            Name = "Ремесло",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2442)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2443),
                            Description = "",
                            Enabled = true,
                            Name = "Воля",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2444)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2445),
                            Description = "",
                            Enabled = true,
                            Name = "Удача",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2445)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2446),
                            Description = "",
                            Enabled = true,
                            Name = "Энергия",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2446)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2447),
                            Description = "",
                            Enabled = true,
                            Name = "Устойчивость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2447)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2448),
                            Description = "",
                            Enabled = true,
                            Name = "Бег",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2449)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2449),
                            Description = "",
                            Enabled = true,
                            Name = "Прыжок",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2450)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2451),
                            Description = "",
                            Enabled = true,
                            Name = "Пункты Здоровья",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2451)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2452),
                            Description = "",
                            Enabled = true,
                            Name = "Выносливость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2452)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2453),
                            Description = "",
                            Enabled = true,
                            Name = "Переносимый вес",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2453)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2454),
                            Description = "",
                            Enabled = true,
                            Name = "Отдых",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2454)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2455),
                            Description = "",
                            Enabled = true,
                            Name = "Удар рукой",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2456)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2457),
                            Description = "",
                            Enabled = true,
                            Name = "Удар ногой",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(2458)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.StatsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionValue")
                        .HasColumnType("int");

                    b.Property<int>("CraftsmanshipId")
                        .HasColumnType("int");

                    b.Property<int>("CraftsmanshipValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DexterityId")
                        .HasColumnType("int");

                    b.Property<int>("DexterityValue")
                        .HasColumnType("int");

                    b.Property<int>("EmpathyId")
                        .HasColumnType("int");

                    b.Property<int>("EmpathyValue")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceId")
                        .HasColumnType("int");

                    b.Property<int>("EnduranceValue")
                        .HasColumnType("int");

                    b.Property<int>("EnergyId")
                        .HasColumnType("int");

                    b.Property<int>("EnergyValue")
                        .HasColumnType("int");

                    b.Property<int>("HandStrikeId")
                        .HasColumnType("int");

                    b.Property<int>("HandStrikeValue")
                        .HasColumnType("int");

                    b.Property<int>("HealthPointsId")
                        .HasColumnType("int");

                    b.Property<int>("HealthPointsValue")
                        .HasColumnType("int");

                    b.Property<int>("IntellectId")
                        .HasColumnType("int");

                    b.Property<int>("IntellectValue")
                        .HasColumnType("int");

                    b.Property<int>("JumpingId")
                        .HasColumnType("int");

                    b.Property<int>("JumpingValue")
                        .HasColumnType("int");

                    b.Property<int>("KickId")
                        .HasColumnType("int");

                    b.Property<int>("KickValue")
                        .HasColumnType("int");

                    b.Property<int>("LuckId")
                        .HasColumnType("int");

                    b.Property<int>("LuckValue")
                        .HasColumnType("int");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionValue")
                        .HasColumnType("int");

                    b.Property<int>("ResilienceId")
                        .HasColumnType("int");

                    b.Property<int>("ResilienceValue")
                        .HasColumnType("int");

                    b.Property<int>("RestId")
                        .HasColumnType("int");

                    b.Property<int>("RestValue")
                        .HasColumnType("int");

                    b.Property<int>("RunningId")
                        .HasColumnType("int");

                    b.Property<int>("RunningValue")
                        .HasColumnType("int");

                    b.Property<int>("SpeedId")
                        .HasColumnType("int");

                    b.Property<int>("SpeedValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeightId")
                        .HasColumnType("int");

                    b.Property<int>("WeightValue")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerId")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StatsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Headline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Headlines");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.BlueprintComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("BlueprintId")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlueprintId");

                    b.HasIndex("ComponentId");

                    b.ToTable("BlueprintComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.FormulaComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("FormulaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("FormulaId");

                    b.ToTable("FormulaComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailabilityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("ItemBases");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBaseEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDealDamage")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("ItemBaseEffectList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChancePercent = 75,
                            Damage = "",
                            EffectId = 2,
                            IsDealDamage = false,
                            ItemBaseId = 2
                        },
                        new
                        {
                            Id = 2,
                            ChancePercent = 0,
                            Damage = "2к6+2",
                            EffectId = 2,
                            IsDealDamage = true,
                            ItemBaseId = 1
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.ServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LogMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceLogs");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CheckDC")
                        .HasColumnType("int");

                    b.Property<int>("ConcetrationEnduranceCost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DangerInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceCost")
                        .HasColumnType("int");

                    b.Property<bool>("IsConcetration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDruidSpell")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPriestSpell")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<string>("SourceTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellLevel")
                        .HasColumnType("int");

                    b.Property<int>("SpellType")
                        .HasColumnType("int");

                    b.Property<string>("SpellTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WithdrawalCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellSkillProtectionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellSkillProtectionList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Users.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemember")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.ToTable("AlchemicalItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailabilityType = 0,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3211),
                            Description = "testAlchemicaItem",
                            Enabled = true,
                            Name = "testAlchemicaItem",
                            Price = 0,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3211),
                            Weight = 1f,
                            ItemType = 0
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Armor", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AmountOfEnhancements")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int>("Stiffness")
                        .HasColumnType("int");

                    b.ToTable("Armors");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AvailabilityType = 0,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3234),
                            Description = "testArmor",
                            Enabled = true,
                            Name = "testArmor",
                            Price = 0,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3234),
                            Weight = 1f,
                            AmountOfEnhancements = 0,
                            ItemType = 0,
                            Reliability = 0,
                            Stiffness = 0
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AdditionalPayment")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<float>("TimeSpend")
                        .HasColumnType("real");

                    b.ToTable("Blueprints");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AvailabilityType = 1,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3359),
                            Description = "testBlueprint",
                            Enabled = true,
                            Name = "testBlueprint",
                            Price = 0,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3359),
                            Weight = 1f,
                            AdditionalPayment = 1,
                            Complexity = 1,
                            ItemType = 0,
                            TimeSpend = 0f
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlchemical")
                        .HasColumnType("bit");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("SubstanceType")
                        .HasColumnType("int");

                    b.Property<string>("WhereToFind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Components");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            AvailabilityType = 0,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3383),
                            Description = "testComponent",
                            Enabled = true,
                            Name = "testComponent",
                            Price = 0,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3384),
                            Weight = 1f,
                            Amount = 0,
                            Complexity = 0,
                            IsAlchemical = false,
                            ItemType = 0,
                            SubstanceType = 0,
                            WhereToFind = ""
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AdditionalPayment")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<float>("TimeSpend")
                        .HasColumnType("real");

                    b.ToTable("Formulas");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            AvailabilityType = 1,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3404),
                            Description = "testFormula",
                            Enabled = true,
                            Name = "testFormula",
                            Price = 0,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3404),
                            Weight = 1f,
                            AdditionalPayment = 1,
                            Complexity = 1,
                            ItemType = 0,
                            TimeSpend = 0f
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Item", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("StealthType")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            AvailabilityType = 0,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3426),
                            Description = "testItem",
                            Enabled = true,
                            Name = "testItem",
                            Price = 0,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3426),
                            Weight = 1f,
                            ItemType = 0,
                            StealthType = 0,
                            Type = 0
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Tool", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            AvailabilityType = 0,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3446),
                            Description = "testTool",
                            Enabled = true,
                            Name = "testTool",
                            Price = 0,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3447),
                            Weight = 1f,
                            ItemType = 0
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Weapon", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfEnhancements")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Grip")
                        .HasColumnType("int");

                    b.Property<bool>("IsAmmunition")
                        .HasColumnType("bit");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("StealthType")
                        .HasColumnType("int");

                    b.HasIndex("SkillId");

                    b.ToTable("Weapons");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            AvailabilityType = 0,
                            CreateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3461),
                            Description = "testWeapon",
                            Enabled = true,
                            Name = "testWeapon",
                            Price = 0,
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 23, 13, 8, 4, 339, DateTimeKind.Local).AddTicks(3461),
                            Weight = 1f,
                            Accuracy = 0,
                            AmountOfEnhancements = 0,
                            Damage = "",
                            Distance = 0,
                            Grip = 0,
                            IsAmmunition = false,
                            ItemType = 0,
                            Reliability = 0,
                            StealthType = 0
                        });
                });

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Effect", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.ServicePrice", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Abilitiy", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("Abilities")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Creature");

                    b.Navigation("Race");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("Attacks")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Creature");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.AttackEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", "Attack")
                        .WithMany("AttackEffectLists")
                        .HasForeignKey("AttackId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.Navigation("Attack");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Class", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsList", "SkillsList")
                        .WithMany()
                        .HasForeignKey("SkillsListId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.StatsList", "StatsList")
                        .WithMany()
                        .HasForeignKey("StatsListId");

                    b.Navigation("SkillsList");

                    b.Navigation("Source");

                    b.Navigation("StatsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("CreatureEffectLists")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectID");

                    b.Navigation("Creature");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureRewardList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("CreatureRewardLists")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", "ItemBase")
                        .WithMany("CreatureRewardLists")
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("Creature");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Race", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsTree", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Class");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Stat", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Headline", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.BlueprintComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", "Blueprint")
                        .WithMany("BlueprintComponentLists")
                        .HasForeignKey("BlueprintId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany("BlueprintComponentLists")
                        .HasForeignKey("ComponentId");

                    b.Navigation("Blueprint");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.FormulaComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany("FormulaComponentLists")
                        .HasForeignKey("ComponentId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Formula", "Formula")
                        .WithMany("FormulaComponentLists")
                        .HasForeignKey("FormulaId");

                    b.Navigation("Component");

                    b.Navigation("Formula");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBaseEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", "ItemBase")
                        .WithMany("ItemBaseEffectLists")
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("Effect");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", "Spell")
                        .WithMany("SpellComponentLists")
                        .HasForeignKey("SpellId");

                    b.Navigation("Component");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellSkillProtectionList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", "Spell")
                        .WithMany("SpellSkillProtectionLists")
                        .HasForeignKey("SpellId");

                    b.Navigation("Effect");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Armor", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Armor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Component", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Formula", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Item", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Item", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Tool", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Tool", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Weapon", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Weapon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.Navigation("AttackEffectLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Attacks");

                    b.Navigation("CreatureEffectLists");

                    b.Navigation("CreatureRewardLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.Navigation("CreatureRewardLists");

                    b.Navigation("ItemBaseEffectLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.Navigation("SpellComponentLists");

                    b.Navigation("SpellSkillProtectionLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.Navigation("BlueprintComponentLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.Navigation("BlueprintComponentLists");

                    b.Navigation("FormulaComponentLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.Navigation("FormulaComponentLists");
                });
#pragma warning restore 612, 618
        }
    }
}
