// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TTRPG_Project.DAL.Data;

#nullable disable

namespace TTRPG_Project.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231109065627_Start")]
    partial class Start
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.Property<int>("CreaturesId")
                        .HasColumnType("int");

                    b.Property<int>("SpellsId")
                        .HasColumnType("int");

                    b.HasKey("CreaturesId", "SpellsId");

                    b.HasIndex("SpellsId");

                    b.ToTable("CreatureSpell");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Effects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(866),
                            Description = "",
                            Enabled = true,
                            Name = "Незаметное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(866)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(867),
                            Description = "",
                            Enabled = true,
                            Name = "Кровопускающее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(867)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(868),
                            Description = "",
                            Enabled = true,
                            Name = "Пробивающее броню",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(869)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(870),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(1)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(870)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(871),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(2)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(871)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(872),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(3)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(872)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(873),
                            Description = "",
                            Enabled = true,
                            Name = "Метеоритное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(874)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(874),
                            Description = "",
                            Enabled = true,
                            Name = "Длинное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(875)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(876),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(1)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(876)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(878),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(2)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(878)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(879),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(3)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(879)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(880),
                            Description = "",
                            Enabled = true,
                            Name = "Сокрушающая сила",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(880)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(881),
                            Description = "",
                            Enabled = true,
                            Name = "Серебрянное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(881)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(882),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(1)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(883)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(884),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(2)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(884)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(885),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(3)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(885)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(886),
                            Description = "",
                            Enabled = true,
                            Name = "Улучшенное пробивание брони",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(886)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(887),
                            Description = "",
                            Enabled = true,
                            Name = "Захватное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(887)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(888),
                            Description = "",
                            Enabled = true,
                            Name = "Ловящий лезвия",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(889)
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(889),
                            Description = "",
                            Enabled = true,
                            Name = "Магические путы",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(890)
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(891),
                            Description = "",
                            Enabled = true,
                            Name = "Медленно перезаряжающееся",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(891)
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(892),
                            Description = "",
                            Enabled = true,
                            Name = "Несмертельное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(892)
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(893),
                            Description = "",
                            Enabled = true,
                            Name = "Опутывающее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(893)
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(894),
                            Description = "",
                            Enabled = true,
                            Name = "Парирующее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(895)
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(895),
                            Description = "",
                            Enabled = true,
                            Name = "Разрушающее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(896)
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(897),
                            Description = "",
                            Enabled = true,
                            Name = "Рукопашное",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(897)
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(899),
                            Description = "",
                            Enabled = true,
                            Name = "Расчетная перезарядка",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(899)
                        },
                        new
                        {
                            Id = 28,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(900),
                            Description = "",
                            Enabled = true,
                            Name = "Улучшенное фокусирующее",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(900)
                        },
                        new
                        {
                            Id = 29,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(901),
                            Description = "",
                            Enabled = true,
                            Name = "Устанавливаемое",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(901)
                        },
                        new
                        {
                            Id = 30,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(902),
                            Description = "",
                            Enabled = true,
                            Name = "Шприц",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(902)
                        },
                        new
                        {
                            Id = 31,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(903),
                            Description = "",
                            Enabled = true,
                            Name = "Закрывает все тело",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(904)
                        },
                        new
                        {
                            Id = 32,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(905),
                            Description = "",
                            Enabled = true,
                            Name = "Огнеупорный",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(905)
                        },
                        new
                        {
                            Id = 33,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(906),
                            Description = "",
                            Enabled = true,
                            Name = "Ограничение зрения",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(906)
                        },
                        new
                        {
                            Id = 34,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(907),
                            Description = "",
                            Enabled = true,
                            Name = "Полное укрытие",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(907)
                        },
                        new
                        {
                            Id = 35,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(908),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(Д)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(908)
                        },
                        new
                        {
                            Id = 36,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(909),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(Р)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(909)
                        },
                        new
                        {
                            Id = 37,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(910),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(К)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(911)
                        },
                        new
                        {
                            Id = 38,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(912),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(С)",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(912)
                        },
                        new
                        {
                            Id = 39,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(913),
                            Description = "",
                            Enabled = true,
                            Name = "Горение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(913)
                        },
                        new
                        {
                            Id = 40,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(914),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентация",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(914)
                        },
                        new
                        {
                            Id = 41,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(915),
                            Description = "",
                            Enabled = true,
                            Name = "Отравление",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(915)
                        },
                        new
                        {
                            Id = 42,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(916),
                            Description = "",
                            Enabled = true,
                            Name = "Кровотечение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(917)
                        },
                        new
                        {
                            Id = 43,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(917),
                            Description = "",
                            Enabled = true,
                            Name = "Замораживание",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(918)
                        },
                        new
                        {
                            Id = 44,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(919),
                            Description = "",
                            Enabled = true,
                            Name = "Ошеломление",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(919)
                        },
                        new
                        {
                            Id = 45,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(920),
                            Description = "",
                            Enabled = true,
                            Name = "Опьянение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(920)
                        },
                        new
                        {
                            Id = 46,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(921),
                            Description = "",
                            Enabled = true,
                            Name = "Галлюцинации",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(921)
                        },
                        new
                        {
                            Id = 47,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(922),
                            Description = "",
                            Enabled = true,
                            Name = "Тошнота",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(922)
                        },
                        new
                        {
                            Id = 48,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(923),
                            Description = "",
                            Enabled = true,
                            Name = "Удушье",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(924)
                        },
                        new
                        {
                            Id = 49,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(925),
                            Description = "",
                            Enabled = true,
                            Name = "Слепота",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(925)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.ServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("ServicePrices");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(512),
                            Enabled = true,
                            Name = "Базовая книга",
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(520)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(521),
                            Enabled = true,
                            Name = "Хоумбрю",
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(522)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Abilitiy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("RaceId");

                    b.HasIndex("SourceId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackEffectListId")
                        .HasColumnType("int");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("int");

                    b.Property<int>("AttackType")
                        .HasColumnType("int");

                    b.Property<int>("BaseAttack")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("SourceId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.AttackEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttackId")
                        .HasColumnType("int");

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDealDamage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("EffectId");

                    b.ToTable("AttackEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultMagicAbilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Energy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsBase")
                        .HasColumnType("int");

                    b.Property<int>("BlockBase")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationSkill")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EvasionBase")
                        .HasColumnType("int");

                    b.Property<string>("GroupSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HabitatPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Intellect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoneyReward")
                        .HasColumnType("int");

                    b.Property<string>("MonsterLoreInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonsterLoreSkill")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Regeneration")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsListId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("SpellResistBase")
                        .HasColumnType("int");

                    b.Property<int?>("StatsListId")
                        .HasColumnType("int");

                    b.Property<string>("SuperstitionsInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SkillsListId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatsListId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int?>("EffectID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("EffectID");

                    b.ToTable("CreatureEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureRewardList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("CreatureRewardList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClassSkill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDifficult")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(721),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Внимание",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(722)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(725),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Выживание в дикой природе",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(725)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(726),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Дедукция",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(727)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(728),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Монстрология",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(728)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(729),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Образование",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(730)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(731),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ориентирование в городе",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(731)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(732),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Передача знаний",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(733)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(735),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Тактика",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(735)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(736),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Торговля",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(736)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(737),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Этикет",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(738)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(739),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык всеобщий",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(739)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(740),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык Старшей Речи",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(741)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(742),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык краснолюдов",
                            SourceId = 1,
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(742)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(743),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ближний бой",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(744)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(745),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Борьба",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(745)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(746),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Верховая езда",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(746)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(748),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение древковым оружием",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(748)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(789),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение легкими клинками",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(789)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(791),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение мечом",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(791)
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(792),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Мореходство",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(793)
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(794),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Уклонение/Изворотливость",
                            SourceId = 1,
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(794)
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(796),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Атлетика",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(796)
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(797),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ловкость рук",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(797)
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(799),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Скрытность",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(799)
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(800),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стрельба из арбалета",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(800)
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(802),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стрельба из лука",
                            SourceId = 1,
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(802)
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(803),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Сила",
                            SourceId = 1,
                            StatId = 4,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(803)
                        },
                        new
                        {
                            Id = 28,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(805),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стойкость",
                            SourceId = 1,
                            StatId = 4,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(805)
                        },
                        new
                        {
                            Id = 29,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(806),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Азартные игры",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(806)
                        },
                        new
                        {
                            Id = 30,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(808),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Внешний вид",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(808)
                        },
                        new
                        {
                            Id = 31,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(809),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Выступление",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(809)
                        },
                        new
                        {
                            Id = 32,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(811),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Искусство",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(811)
                        },
                        new
                        {
                            Id = 33,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(812),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Лидерство",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(812)
                        },
                        new
                        {
                            Id = 34,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(814),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Обман",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(815)
                        },
                        new
                        {
                            Id = 35,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(816),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Понимание людей",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(816)
                        },
                        new
                        {
                            Id = 36,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(817),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Соблазнение",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(818)
                        },
                        new
                        {
                            Id = 37,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(819),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Убеждение",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(819)
                        },
                        new
                        {
                            Id = 38,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(821),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Харизма",
                            SourceId = 1,
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(821)
                        },
                        new
                        {
                            Id = 39,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(822),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Алхимия",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(822)
                        },
                        new
                        {
                            Id = 40,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(824),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Взлом замков",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(824)
                        },
                        new
                        {
                            Id = 41,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(825),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Знание ловушек",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(825)
                        },
                        new
                        {
                            Id = 42,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(826),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Изготовление",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(827)
                        },
                        new
                        {
                            Id = 43,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(828),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Маскировка",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(828)
                        },
                        new
                        {
                            Id = 44,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(829),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Первая помощь",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(830)
                        },
                        new
                        {
                            Id = 45,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(831),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Подделывание",
                            SourceId = 1,
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(831)
                        },
                        new
                        {
                            Id = 46,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(832),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Запугивание",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(833)
                        },
                        new
                        {
                            Id = 47,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(835),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Наведение порчи",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(835)
                        },
                        new
                        {
                            Id = 48,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(836),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Проведение ритуалов",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(836)
                        },
                        new
                        {
                            Id = 49,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(838),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Сопротивление магии",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(838)
                        },
                        new
                        {
                            Id = 50,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(839),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Сопротивление убеждению",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(839)
                        },
                        new
                        {
                            Id = 51,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(841),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Сотворение заклинаний",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(841)
                        },
                        new
                        {
                            Id = 52,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(842),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Храбрость",
                            SourceId = 1,
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(842)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlchemyId")
                        .HasColumnType("int");

                    b.Property<int>("AlchemyValue")
                        .HasColumnType("int");

                    b.Property<int>("AppearanceId")
                        .HasColumnType("int");

                    b.Property<int>("AppearanceValue")
                        .HasColumnType("int");

                    b.Property<int>("ArcheryId")
                        .HasColumnType("int");

                    b.Property<int>("ArcheryValue")
                        .HasColumnType("int");

                    b.Property<int>("ArtistryId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistryValue")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsId")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsValue")
                        .HasColumnType("int");

                    b.Property<int>("AttentionId")
                        .HasColumnType("int");

                    b.Property<int>("AttentionValue")
                        .HasColumnType("int");

                    b.Property<int>("CamouflageId")
                        .HasColumnType("int");

                    b.Property<int>("CamouflageValue")
                        .HasColumnType("int");

                    b.Property<int>("CharismaId")
                        .HasColumnType("int");

                    b.Property<int>("CharismaValue")
                        .HasColumnType("int");

                    b.Property<int>("CityOrientationId")
                        .HasColumnType("int");

                    b.Property<int>("CityOrientationValue")
                        .HasColumnType("int");

                    b.Property<int?>("ClassSkill")
                        .HasColumnType("int");

                    b.Property<int>("ClassSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("CourageId")
                        .HasColumnType("int");

                    b.Property<int>("CourageValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CrossbowMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("CrossbowMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("DeceptionId")
                        .HasColumnType("int");

                    b.Property<int>("DeceptionValue")
                        .HasColumnType("int");

                    b.Property<int>("DeductionId")
                        .HasColumnType("int");

                    b.Property<int>("DeductionValue")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<int>("EducationValue")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceId")
                        .HasColumnType("int");

                    b.Property<int>("EnduranceValue")
                        .HasColumnType("int");

                    b.Property<int>("EtiquetteId")
                        .HasColumnType("int");

                    b.Property<int>("EtiquetteValue")
                        .HasColumnType("int");

                    b.Property<int>("EvasionId")
                        .HasColumnType("int");

                    b.Property<int>("EvasionValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstAidId")
                        .HasColumnType("int");

                    b.Property<int>("FirstAidValue")
                        .HasColumnType("int");

                    b.Property<int>("ForgeryId")
                        .HasColumnType("int");

                    b.Property<int>("ForgeryValue")
                        .HasColumnType("int");

                    b.Property<int>("GamblingId")
                        .HasColumnType("int");

                    b.Property<int>("GamblingValue")
                        .HasColumnType("int");

                    b.Property<int>("IntimidationId")
                        .HasColumnType("int");

                    b.Property<int>("IntimidationValue")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeTransferId")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeTransferValue")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageValue")
                        .HasColumnType("int");

                    b.Property<int>("LeadershipId")
                        .HasColumnType("int");

                    b.Property<int>("LeadershipValue")
                        .HasColumnType("int");

                    b.Property<int>("LightBladeMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("LightBladeMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("LockpickingId")
                        .HasColumnType("int");

                    b.Property<int>("LockpickingValue")
                        .HasColumnType("int");

                    b.Property<int>("MagicResistanceId")
                        .HasColumnType("int");

                    b.Property<int>("MagicResistanceValue")
                        .HasColumnType("int");

                    b.Property<int>("ManualDexterityId")
                        .HasColumnType("int");

                    b.Property<int>("ManualDexterityValue")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturingId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturingValue")
                        .HasColumnType("int");

                    b.Property<int>("MeleeCombatId")
                        .HasColumnType("int");

                    b.Property<int>("MeleeCombatValue")
                        .HasColumnType("int");

                    b.Property<int>("MonsterologyId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterologyValue")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionId")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionResistanceId")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionResistanceValue")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionValue")
                        .HasColumnType("int");

                    b.Property<int>("PoleWeaponMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("PoleWeaponMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("PublicSpeakingId")
                        .HasColumnType("int");

                    b.Property<int>("PublicSpeakingValue")
                        .HasColumnType("int");

                    b.Property<int>("RidingId")
                        .HasColumnType("int");

                    b.Property<int>("RidingValue")
                        .HasColumnType("int");

                    b.Property<int>("RitualsId")
                        .HasColumnType("int");

                    b.Property<int>("RitualsValue")
                        .HasColumnType("int");

                    b.Property<int>("SeamanshipId")
                        .HasColumnType("int");

                    b.Property<int>("SeamanshipValue")
                        .HasColumnType("int");

                    b.Property<int>("SeductionId")
                        .HasColumnType("int");

                    b.Property<int>("SeductionValue")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingId")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingValue")
                        .HasColumnType("int");

                    b.Property<int>("StealthId")
                        .HasColumnType("int");

                    b.Property<int>("StealthValue")
                        .HasColumnType("int");

                    b.Property<int>("StrengthId")
                        .HasColumnType("int");

                    b.Property<int>("StrengthValue")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalId")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalValue")
                        .HasColumnType("int");

                    b.Property<int>("SwordsmanshipId")
                        .HasColumnType("int");

                    b.Property<int>("SwordsmanshipValue")
                        .HasColumnType("int");

                    b.Property<int>("TacticsId")
                        .HasColumnType("int");

                    b.Property<int>("TacticsValue")
                        .HasColumnType("int");

                    b.Property<int>("TradingId")
                        .HasColumnType("int");

                    b.Property<int>("TradingValue")
                        .HasColumnType("int");

                    b.Property<int>("TrapKnowledgeId")
                        .HasColumnType("int");

                    b.Property<int>("TrapKnowledgeValue")
                        .HasColumnType("int");

                    b.Property<int>("UnderstandingPeopleId")
                        .HasColumnType("int");

                    b.Property<int>("UnderstandingPeopleValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WrestlingId")
                        .HasColumnType("int");

                    b.Property<int>("WrestlingValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("FirstLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstRightSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("MainSkillId")
                        .HasColumnType("int");

                    b.Property<int>("MainSkillValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("SecondMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("SecondRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondRightSkillValue")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("ThirdMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRightSkillValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SourceId");

                    b.ToTable("SkillsTree");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Stats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(677),
                            Description = "",
                            Enabled = true,
                            Name = "Интеллект",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(678)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(679),
                            Description = "",
                            Enabled = true,
                            Name = "Реакция",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(680)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(681),
                            Description = "",
                            Enabled = true,
                            Name = "Ловкость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(681)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(682),
                            Description = "",
                            Enabled = true,
                            Name = "Телосложение",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(682)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(683),
                            Description = "",
                            Enabled = true,
                            Name = "Скорость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(684)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(684),
                            Description = "",
                            Enabled = true,
                            Name = "Эмпатия",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(685)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(686),
                            Description = "",
                            Enabled = true,
                            Name = "Ремесло",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(686)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(687),
                            Description = "",
                            Enabled = true,
                            Name = "Воля",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(687)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(688),
                            Description = "",
                            Enabled = true,
                            Name = "Удача",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(689)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(689),
                            Description = "",
                            Enabled = true,
                            Name = "Энергия",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(690)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(691),
                            Description = "",
                            Enabled = true,
                            Name = "Устойчивость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(691)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(693),
                            Description = "",
                            Enabled = true,
                            Name = "Бег",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(693)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(694),
                            Description = "",
                            Enabled = true,
                            Name = "Прыжок",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(694)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(695),
                            Description = "",
                            Enabled = true,
                            Name = "Пункты Здоровья",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(696)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(697),
                            Description = "",
                            Enabled = true,
                            Name = "Выносливость",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(697)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(698),
                            Description = "",
                            Enabled = true,
                            Name = "Переносимый вес",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(698)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(699),
                            Description = "",
                            Enabled = true,
                            Name = "Отдых",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(699)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(700),
                            Description = "",
                            Enabled = true,
                            Name = "Удар рукой",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(700)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(701),
                            Description = "",
                            Enabled = true,
                            Name = "Удар ногой",
                            SourceId = 1,
                            UpdateDate = new DateTime(2023, 11, 9, 13, 56, 27, 484, DateTimeKind.Local).AddTicks(702)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.StatsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionValue")
                        .HasColumnType("int");

                    b.Property<int>("CraftsmanshipId")
                        .HasColumnType("int");

                    b.Property<int>("CraftsmanshipValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DexterityId")
                        .HasColumnType("int");

                    b.Property<int>("DexterityValue")
                        .HasColumnType("int");

                    b.Property<int>("EmpathyId")
                        .HasColumnType("int");

                    b.Property<int>("EmpathyValue")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceId")
                        .HasColumnType("int");

                    b.Property<int>("EnduranceValue")
                        .HasColumnType("int");

                    b.Property<int>("EnergyId")
                        .HasColumnType("int");

                    b.Property<int>("EnergyValue")
                        .HasColumnType("int");

                    b.Property<int>("HandStrikeId")
                        .HasColumnType("int");

                    b.Property<int>("HandStrikeValue")
                        .HasColumnType("int");

                    b.Property<int>("HealthPointsId")
                        .HasColumnType("int");

                    b.Property<int>("HealthPointsValue")
                        .HasColumnType("int");

                    b.Property<int>("IntellectId")
                        .HasColumnType("int");

                    b.Property<int>("IntellectValue")
                        .HasColumnType("int");

                    b.Property<int>("JumpingId")
                        .HasColumnType("int");

                    b.Property<int>("JumpingValue")
                        .HasColumnType("int");

                    b.Property<int>("KickId")
                        .HasColumnType("int");

                    b.Property<int>("KickValue")
                        .HasColumnType("int");

                    b.Property<int>("LuckId")
                        .HasColumnType("int");

                    b.Property<int>("LuckValue")
                        .HasColumnType("int");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionValue")
                        .HasColumnType("int");

                    b.Property<int>("ResilienceId")
                        .HasColumnType("int");

                    b.Property<int>("ResilienceValue")
                        .HasColumnType("int");

                    b.Property<int>("RestId")
                        .HasColumnType("int");

                    b.Property<int>("RestValue")
                        .HasColumnType("int");

                    b.Property<int>("RunningId")
                        .HasColumnType("int");

                    b.Property<int>("RunningValue")
                        .HasColumnType("int");

                    b.Property<int>("SpeedId")
                        .HasColumnType("int");

                    b.Property<int>("SpeedValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeightId")
                        .HasColumnType("int");

                    b.Property<int>("WeightValue")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerId")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StatsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Headline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Headlines");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.BlueprintComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("BlueprintId")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlueprintId");

                    b.HasIndex("ComponentId");

                    b.ToTable("BlueprintComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.FormulaComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("FormulaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("FormulaId");

                    b.ToTable("FormulaComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailabilityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("ItemsBase");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBaseEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDealDamage")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("ItemBaseEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.ServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LogMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceLogs");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CheckDC")
                        .HasColumnType("int");

                    b.Property<int>("ConcetrationEnduranceCost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DangerInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceCost")
                        .HasColumnType("int");

                    b.Property<bool>("IsConcetration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDruidSpell")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPriestSpell")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<string>("SourceTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellLevel")
                        .HasColumnType("int");

                    b.Property<int>("SpellType")
                        .HasColumnType("int");

                    b.Property<string>("SpellTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WithdrawalCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellSkillProtectionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellSkillProtectionList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Users.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemember")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.ToTable("AlchemicalItems");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Armor", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AmountOfEnhancements")
                        .HasColumnType("int");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int>("Stiffness")
                        .HasColumnType("int");

                    b.ToTable("Armor");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AdditionalPayment")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<float>("TimeSpend")
                        .HasColumnType("real");

                    b.ToTable("Blueprints");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlchemical")
                        .HasColumnType("bit");

                    b.Property<int>("SubstanceType")
                        .HasColumnType("int");

                    b.Property<string>("WhereToFind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AdditionalPayment")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<float>("TimeSpend")
                        .HasColumnType("real");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Item", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("StealthType")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Tool", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Weapon", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfEnhancements")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Grip")
                        .HasColumnType("int");

                    b.Property<bool>("IsAmmunition")
                        .HasColumnType("bit");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("StealthType")
                        .HasColumnType("int");

                    b.HasIndex("SkillId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Effect", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.ServicePrice", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Abilitiy", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("Abilities")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Creature");

                    b.Navigation("Race");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("Attacks")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Creature");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.AttackEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", "Attack")
                        .WithMany("AttackEffectLists")
                        .HasForeignKey("AttackId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.Navigation("Attack");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Class", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsList", "SkillsList")
                        .WithMany()
                        .HasForeignKey("SkillsListId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.StatsList", "StatsList")
                        .WithMany()
                        .HasForeignKey("StatsListId");

                    b.Navigation("SkillsList");

                    b.Navigation("Source");

                    b.Navigation("StatsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("CreatureEffectLists")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectID");

                    b.Navigation("Creature");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureRewardList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("CreatureRewardLists")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", "ItemBase")
                        .WithMany("CreatureRewardLists")
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("Creature");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Race", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsTree", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Class");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Stat", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Headline", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.BlueprintComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", "Blueprint")
                        .WithMany("BlueprintComponentLists")
                        .HasForeignKey("BlueprintId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany("BlueprintComponentLists")
                        .HasForeignKey("ComponentId");

                    b.Navigation("Blueprint");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.FormulaComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany("FormulaComponentLists")
                        .HasForeignKey("ComponentId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Formula", "Formula")
                        .WithMany("FormulaComponentLists")
                        .HasForeignKey("FormulaId");

                    b.Navigation("Component");

                    b.Navigation("Formula");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBaseEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", "ItemBase")
                        .WithMany("ItemBaseEffectLists")
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("Effect");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", "Spell")
                        .WithMany("SpellComponentLists")
                        .HasForeignKey("SpellId");

                    b.Navigation("Component");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellSkillProtectionList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", "Spell")
                        .WithMany("SpellSkillProtectionLists")
                        .HasForeignKey("SpellId");

                    b.Navigation("Effect");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Armor", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Armor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Component", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Formula", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Item", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Item", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Tool", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Tool", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Weapon", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Weapon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.Navigation("AttackEffectLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Attacks");

                    b.Navigation("CreatureEffectLists");

                    b.Navigation("CreatureRewardLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.Navigation("CreatureRewardLists");

                    b.Navigation("ItemBaseEffectLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.Navigation("SpellComponentLists");

                    b.Navigation("SpellSkillProtectionLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.Navigation("BlueprintComponentLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.Navigation("BlueprintComponentLists");

                    b.Navigation("FormulaComponentLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.Navigation("FormulaComponentLists");
                });
#pragma warning restore 612, 618
        }
    }
}
