// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TTRPG_Project.DAL.Data;

#nullable disable

namespace TTRPG_Project.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231108044833_AddSource")]
    partial class AddSource
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.Property<int>("CreaturesId")
                        .HasColumnType("int");

                    b.Property<int>("SpellsId")
                        .HasColumnType("int");

                    b.HasKey("CreaturesId", "SpellsId");

                    b.HasIndex("SpellsId");

                    b.ToTable("CreatureSpell");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Effects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2227),
                            Description = "",
                            Enabled = true,
                            Name = "Незаметное",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2227)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2228),
                            Description = "",
                            Enabled = true,
                            Name = "Кровопускающее",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2229)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2230),
                            Description = "",
                            Enabled = true,
                            Name = "Пробивающее броню",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2230)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2231),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(1)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2231)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2232),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(2)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2232)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2251),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентирующее(3)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2251)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2252),
                            Description = "",
                            Enabled = true,
                            Name = "Метеоритное",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2252)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2253),
                            Description = "",
                            Enabled = true,
                            Name = "Длинное",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2254)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2254),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(1)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2255)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2255),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(2)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2256)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2257),
                            Description = "",
                            Enabled = true,
                            Name = "Фокусирующее(3)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2257)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2258),
                            Description = "",
                            Enabled = true,
                            Name = "Сокрушающая сила",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2258)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2259),
                            Description = "",
                            Enabled = true,
                            Name = "Серебрянное",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2259)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2260),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(1)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2260)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2261),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(2)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2261)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2262),
                            Description = "",
                            Enabled = true,
                            Name = "Сбалансированное(3)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2262)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2263),
                            Description = "",
                            Enabled = true,
                            Name = "Улучшенное пробивание брони",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2263)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2264),
                            Description = "",
                            Enabled = true,
                            Name = "Захватное",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2264)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2265),
                            Description = "",
                            Enabled = true,
                            Name = "Ловящий лезвия",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2266)
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2266),
                            Description = "",
                            Enabled = true,
                            Name = "Магические путы",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2267)
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2267),
                            Description = "",
                            Enabled = true,
                            Name = "Медленно перезаряжающееся",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2268)
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2268),
                            Description = "",
                            Enabled = true,
                            Name = "Несмертельное",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2269)
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2269),
                            Description = "",
                            Enabled = true,
                            Name = "Опутывающее",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2270)
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2270),
                            Description = "",
                            Enabled = true,
                            Name = "Парирующее",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2271)
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2271),
                            Description = "",
                            Enabled = true,
                            Name = "Разрушающее",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2272)
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2272),
                            Description = "",
                            Enabled = true,
                            Name = "Рукопашное",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2273)
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2273),
                            Description = "",
                            Enabled = true,
                            Name = "Расчетная перезарядка",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2274)
                        },
                        new
                        {
                            Id = 28,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2274),
                            Description = "",
                            Enabled = true,
                            Name = "Улучшенное фокусирующее",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2275)
                        },
                        new
                        {
                            Id = 29,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2275),
                            Description = "",
                            Enabled = true,
                            Name = "Устанавливаемое",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2276)
                        },
                        new
                        {
                            Id = 30,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2276),
                            Description = "",
                            Enabled = true,
                            Name = "Шприц",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2277)
                        },
                        new
                        {
                            Id = 31,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2278),
                            Description = "",
                            Enabled = true,
                            Name = "Закрывает все тело",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2278)
                        },
                        new
                        {
                            Id = 32,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2279),
                            Description = "",
                            Enabled = true,
                            Name = "Огнеупорный",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2279)
                        },
                        new
                        {
                            Id = 33,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2279),
                            Description = "",
                            Enabled = true,
                            Name = "Ограничение зрения",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2280)
                        },
                        new
                        {
                            Id = 34,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2280),
                            Description = "",
                            Enabled = true,
                            Name = "Полное укрытие",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2281)
                        },
                        new
                        {
                            Id = 35,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2281),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(Д)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2282)
                        },
                        new
                        {
                            Id = 36,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2282),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(Р)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2283)
                        },
                        new
                        {
                            Id = 37,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2283),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(К)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2284)
                        },
                        new
                        {
                            Id = 38,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2285),
                            Description = "",
                            Enabled = true,
                            Name = "Сопротивление(С)",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2286)
                        },
                        new
                        {
                            Id = 39,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2286),
                            Description = "",
                            Enabled = true,
                            Name = "Горение",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2287)
                        },
                        new
                        {
                            Id = 40,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2287),
                            Description = "",
                            Enabled = true,
                            Name = "Дезориентация",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2288)
                        },
                        new
                        {
                            Id = 41,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2288),
                            Description = "",
                            Enabled = true,
                            Name = "Отравление",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2289)
                        },
                        new
                        {
                            Id = 42,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2289),
                            Description = "",
                            Enabled = true,
                            Name = "Кровотечение",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2290)
                        },
                        new
                        {
                            Id = 43,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2290),
                            Description = "",
                            Enabled = true,
                            Name = "Замораживание",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2291)
                        },
                        new
                        {
                            Id = 44,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2291),
                            Description = "",
                            Enabled = true,
                            Name = "Ошеломление",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2292)
                        },
                        new
                        {
                            Id = 45,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2292),
                            Description = "",
                            Enabled = true,
                            Name = "Опьянение",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2293)
                        },
                        new
                        {
                            Id = 46,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2293),
                            Description = "",
                            Enabled = true,
                            Name = "Галлюцинации",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2294)
                        },
                        new
                        {
                            Id = 47,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2294),
                            Description = "",
                            Enabled = true,
                            Name = "Тошнота",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2295)
                        },
                        new
                        {
                            Id = 48,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2295),
                            Description = "",
                            Enabled = true,
                            Name = "Удушье",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2296)
                        },
                        new
                        {
                            Id = 49,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2296),
                            Description = "",
                            Enabled = true,
                            Name = "Слепота",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2297)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Additional.ServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServicePrices");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Abilitiy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("RaceId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackEffectListId")
                        .HasColumnType("int");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("int");

                    b.Property<int>("AttackType")
                        .HasColumnType("int");

                    b.Property<int>("BaseAttack")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.AttackEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttackId")
                        .HasColumnType("int");

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDealDamage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("EffectId");

                    b.ToTable("AttackEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultMagicAbilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Energy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsBase")
                        .HasColumnType("int");

                    b.Property<int>("BlockBase")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationSkill")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EvasionBase")
                        .HasColumnType("int");

                    b.Property<string>("GroupSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HabitatPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Intellect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoneyReward")
                        .HasColumnType("int");

                    b.Property<string>("MonsterLoreInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonsterLoreSkill")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Regeneration")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsListId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellResistBase")
                        .HasColumnType("int");

                    b.Property<int?>("StatsListId")
                        .HasColumnType("int");

                    b.Property<string>("SuperstitionsInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SkillsListId");

                    b.HasIndex("StatsListId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int?>("EffectID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("EffectID");

                    b.ToTable("CreatureEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureRewardList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("CreatureRewardList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClassSkill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDifficult")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2132),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Внимание",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2133)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2136),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Выживание в дикой природе",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2136)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2137),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Дедукция",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2137)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2138),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Монстрология",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2139)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2140),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Образование",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2140)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2141),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ориентирование в городе",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2141)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2142),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Передача знаний",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2143)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2145),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Тактика",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2145)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2146),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Торговля",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2146)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2147),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Этикет",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2147)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2148),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык всеобщий",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2149)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2150),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык Старшей Речи",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2150)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2151),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Язык краснолюдов",
                            Source = "",
                            StatId = 1,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2151)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2152),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ближний бой",
                            Source = "",
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2153)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2154),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Борьба",
                            Source = "",
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2154)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2155),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Верховая езда",
                            Source = "",
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2155)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2156),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение древковым оружием",
                            Source = "",
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2157)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2158),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение легкими клинками",
                            Source = "",
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2158)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2159),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Владение мечом",
                            Source = "",
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2159)
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2160),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Мореходство",
                            Source = "",
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2160)
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2161),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Уклонение/Изворотливость",
                            Source = "",
                            StatId = 2,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2162)
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2163),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Атлетика",
                            Source = "",
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2163)
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2164),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Ловкость рук",
                            Source = "",
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2164)
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2165),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Скрытность",
                            Source = "",
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2165)
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2166),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стрельба из арбалета",
                            Source = "",
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2167)
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2168),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стрельба из лука",
                            Source = "",
                            StatId = 3,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2168)
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2170),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Сила",
                            Source = "",
                            StatId = 4,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2170)
                        },
                        new
                        {
                            Id = 28,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2171),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Стойкость",
                            Source = "",
                            StatId = 4,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2171)
                        },
                        new
                        {
                            Id = 29,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2172),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Азартные игры",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2173)
                        },
                        new
                        {
                            Id = 30,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2174),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Внешний вид",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2174)
                        },
                        new
                        {
                            Id = 31,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2175),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Выступление",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2175)
                        },
                        new
                        {
                            Id = 32,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2176),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Искусство",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2176)
                        },
                        new
                        {
                            Id = 33,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2177),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Лидерство",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2178)
                        },
                        new
                        {
                            Id = 34,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2179),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Обман",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2179)
                        },
                        new
                        {
                            Id = 35,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2180),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Понимание людей",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2180)
                        },
                        new
                        {
                            Id = 36,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2181),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Соблазнение",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2181)
                        },
                        new
                        {
                            Id = 37,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2182),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Убеждение",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2183)
                        },
                        new
                        {
                            Id = 38,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2184),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Харизма",
                            Source = "",
                            StatId = 6,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2184)
                        },
                        new
                        {
                            Id = 39,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2185),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Алхимия",
                            Source = "",
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2185)
                        },
                        new
                        {
                            Id = 40,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2186),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Взлом замков",
                            Source = "",
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2186)
                        },
                        new
                        {
                            Id = 41,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2187),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Знание ловушек",
                            Source = "",
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2188)
                        },
                        new
                        {
                            Id = 42,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2189),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Изготовление",
                            Source = "",
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2189)
                        },
                        new
                        {
                            Id = 43,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2190),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Маскировка",
                            Source = "",
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2190)
                        },
                        new
                        {
                            Id = 44,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2191),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Первая помощь",
                            Source = "",
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2191)
                        },
                        new
                        {
                            Id = 45,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2192),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Подделывание",
                            Source = "",
                            StatId = 7,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2193)
                        },
                        new
                        {
                            Id = 46,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2194),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Запугивание",
                            Source = "",
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2194)
                        },
                        new
                        {
                            Id = 47,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2196),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Наведение порчи",
                            Source = "",
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2196)
                        },
                        new
                        {
                            Id = 48,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2197),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Проведение ритуалов",
                            Source = "",
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2197)
                        },
                        new
                        {
                            Id = 49,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2198),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Сопротивление магии",
                            Source = "",
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2199)
                        },
                        new
                        {
                            Id = 50,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2200),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Сопротивление убеждению",
                            Source = "",
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2200)
                        },
                        new
                        {
                            Id = 51,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2201),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = true,
                            Name = "Сотворение заклинаний",
                            Source = "",
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2201)
                        },
                        new
                        {
                            Id = 52,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2202),
                            Description = "",
                            Enabled = true,
                            IsClassSkill = false,
                            IsDifficult = false,
                            Name = "Храбрость",
                            Source = "",
                            StatId = 8,
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2202)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlchemyId")
                        .HasColumnType("int");

                    b.Property<int>("AlchemyValue")
                        .HasColumnType("int");

                    b.Property<int>("AppearanceId")
                        .HasColumnType("int");

                    b.Property<int>("AppearanceValue")
                        .HasColumnType("int");

                    b.Property<int>("ArcheryId")
                        .HasColumnType("int");

                    b.Property<int>("ArcheryValue")
                        .HasColumnType("int");

                    b.Property<int>("ArtistryId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistryValue")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsId")
                        .HasColumnType("int");

                    b.Property<int>("AthleticsValue")
                        .HasColumnType("int");

                    b.Property<int>("AttentionId")
                        .HasColumnType("int");

                    b.Property<int>("AttentionValue")
                        .HasColumnType("int");

                    b.Property<int>("CamouflageId")
                        .HasColumnType("int");

                    b.Property<int>("CamouflageValue")
                        .HasColumnType("int");

                    b.Property<int>("CharismaId")
                        .HasColumnType("int");

                    b.Property<int>("CharismaValue")
                        .HasColumnType("int");

                    b.Property<int>("CityOrientationId")
                        .HasColumnType("int");

                    b.Property<int>("CityOrientationValue")
                        .HasColumnType("int");

                    b.Property<int?>("ClassSkill")
                        .HasColumnType("int");

                    b.Property<int>("ClassSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("CourageId")
                        .HasColumnType("int");

                    b.Property<int>("CourageValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CrossbowMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("CrossbowMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("DeceptionId")
                        .HasColumnType("int");

                    b.Property<int>("DeceptionValue")
                        .HasColumnType("int");

                    b.Property<int>("DeductionId")
                        .HasColumnType("int");

                    b.Property<int>("DeductionValue")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<int>("EducationValue")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceId")
                        .HasColumnType("int");

                    b.Property<int>("EnduranceValue")
                        .HasColumnType("int");

                    b.Property<int>("EtiquetteId")
                        .HasColumnType("int");

                    b.Property<int>("EtiquetteValue")
                        .HasColumnType("int");

                    b.Property<int>("EvasionId")
                        .HasColumnType("int");

                    b.Property<int>("EvasionValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstAidId")
                        .HasColumnType("int");

                    b.Property<int>("FirstAidValue")
                        .HasColumnType("int");

                    b.Property<int>("ForgeryId")
                        .HasColumnType("int");

                    b.Property<int>("ForgeryValue")
                        .HasColumnType("int");

                    b.Property<int>("GamblingId")
                        .HasColumnType("int");

                    b.Property<int>("GamblingValue")
                        .HasColumnType("int");

                    b.Property<int>("IntimidationId")
                        .HasColumnType("int");

                    b.Property<int>("IntimidationValue")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeTransferId")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeTransferValue")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageValue")
                        .HasColumnType("int");

                    b.Property<int>("LeadershipId")
                        .HasColumnType("int");

                    b.Property<int>("LeadershipValue")
                        .HasColumnType("int");

                    b.Property<int>("LightBladeMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("LightBladeMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("LockpickingId")
                        .HasColumnType("int");

                    b.Property<int>("LockpickingValue")
                        .HasColumnType("int");

                    b.Property<int>("MagicResistanceId")
                        .HasColumnType("int");

                    b.Property<int>("MagicResistanceValue")
                        .HasColumnType("int");

                    b.Property<int>("ManualDexterityId")
                        .HasColumnType("int");

                    b.Property<int>("ManualDexterityValue")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturingId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturingValue")
                        .HasColumnType("int");

                    b.Property<int>("MeleeCombatId")
                        .HasColumnType("int");

                    b.Property<int>("MeleeCombatValue")
                        .HasColumnType("int");

                    b.Property<int>("MonsterologyId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterologyValue")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionId")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionResistanceId")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionResistanceValue")
                        .HasColumnType("int");

                    b.Property<int>("PersuasionValue")
                        .HasColumnType("int");

                    b.Property<int>("PoleWeaponMasteryId")
                        .HasColumnType("int");

                    b.Property<int>("PoleWeaponMasteryValue")
                        .HasColumnType("int");

                    b.Property<int>("PublicSpeakingId")
                        .HasColumnType("int");

                    b.Property<int>("PublicSpeakingValue")
                        .HasColumnType("int");

                    b.Property<int>("RidingId")
                        .HasColumnType("int");

                    b.Property<int>("RidingValue")
                        .HasColumnType("int");

                    b.Property<int>("RitualsId")
                        .HasColumnType("int");

                    b.Property<int>("RitualsValue")
                        .HasColumnType("int");

                    b.Property<int>("SeamanshipId")
                        .HasColumnType("int");

                    b.Property<int>("SeamanshipValue")
                        .HasColumnType("int");

                    b.Property<int>("SeductionId")
                        .HasColumnType("int");

                    b.Property<int>("SeductionValue")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingId")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingValue")
                        .HasColumnType("int");

                    b.Property<int>("StealthId")
                        .HasColumnType("int");

                    b.Property<int>("StealthValue")
                        .HasColumnType("int");

                    b.Property<int>("StrengthId")
                        .HasColumnType("int");

                    b.Property<int>("StrengthValue")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalId")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalValue")
                        .HasColumnType("int");

                    b.Property<int>("SwordsmanshipId")
                        .HasColumnType("int");

                    b.Property<int>("SwordsmanshipValue")
                        .HasColumnType("int");

                    b.Property<int>("TacticsId")
                        .HasColumnType("int");

                    b.Property<int>("TacticsValue")
                        .HasColumnType("int");

                    b.Property<int>("TradingId")
                        .HasColumnType("int");

                    b.Property<int>("TradingValue")
                        .HasColumnType("int");

                    b.Property<int>("TrapKnowledgeId")
                        .HasColumnType("int");

                    b.Property<int>("TrapKnowledgeValue")
                        .HasColumnType("int");

                    b.Property<int>("UnderstandingPeopleId")
                        .HasColumnType("int");

                    b.Property<int>("UnderstandingPeopleValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WrestlingId")
                        .HasColumnType("int");

                    b.Property<int>("WrestlingValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("FirstLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("FirstRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FirstRightSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("MainSkillId")
                        .HasColumnType("int");

                    b.Property<int>("MainSkillValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("SecondMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("SecondRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("SecondRightSkillValue")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThirdLeftSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdLeftSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("ThirdMiddleSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdMiddleSkillValue")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRightSkillId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRightSkillValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("SkillsTree");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Stats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1947),
                            Description = "",
                            Enabled = true,
                            Name = "Интеллект",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1955)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1982),
                            Description = "",
                            Enabled = true,
                            Name = "Реакция",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1982)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1983),
                            Description = "",
                            Enabled = true,
                            Name = "Ловкость",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1983)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1984),
                            Description = "",
                            Enabled = true,
                            Name = "Телосложение",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1985)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1985),
                            Description = "",
                            Enabled = true,
                            Name = "Скорость",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1986)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1987),
                            Description = "",
                            Enabled = true,
                            Name = "Эмпатия",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1987)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1988),
                            Description = "",
                            Enabled = true,
                            Name = "Ремесло",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1988)
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1989),
                            Description = "",
                            Enabled = true,
                            Name = "Воля",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1989)
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1990),
                            Description = "",
                            Enabled = true,
                            Name = "Удача",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1990)
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1991),
                            Description = "",
                            Enabled = true,
                            Name = "Энергия",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1991)
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1992),
                            Description = "",
                            Enabled = true,
                            Name = "Устойчивость",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1992)
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1993),
                            Description = "",
                            Enabled = true,
                            Name = "Бег",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1993)
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1994),
                            Description = "",
                            Enabled = true,
                            Name = "Прыжок",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1994)
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1995),
                            Description = "",
                            Enabled = true,
                            Name = "Пункты Здоровья",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1995)
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1996),
                            Description = "",
                            Enabled = true,
                            Name = "Выносливость",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1996)
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1997),
                            Description = "",
                            Enabled = true,
                            Name = "Переносимый вес",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1997)
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1998),
                            Description = "",
                            Enabled = true,
                            Name = "Отдых",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1998)
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1999),
                            Description = "",
                            Enabled = true,
                            Name = "Удар рукой",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(1999)
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2000),
                            Description = "",
                            Enabled = true,
                            Name = "Удар ногой",
                            Source = "",
                            UpdateDate = new DateTime(2023, 11, 8, 11, 48, 32, 727, DateTimeKind.Local).AddTicks(2000)
                        });
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.StatsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionValue")
                        .HasColumnType("int");

                    b.Property<int>("CraftsmanshipId")
                        .HasColumnType("int");

                    b.Property<int>("CraftsmanshipValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DexterityId")
                        .HasColumnType("int");

                    b.Property<int>("DexterityValue")
                        .HasColumnType("int");

                    b.Property<int>("EmpathyId")
                        .HasColumnType("int");

                    b.Property<int>("EmpathyValue")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceId")
                        .HasColumnType("int");

                    b.Property<int>("EnduranceValue")
                        .HasColumnType("int");

                    b.Property<int>("EnergyId")
                        .HasColumnType("int");

                    b.Property<int>("EnergyValue")
                        .HasColumnType("int");

                    b.Property<int>("HandStrikeId")
                        .HasColumnType("int");

                    b.Property<int>("HandStrikeValue")
                        .HasColumnType("int");

                    b.Property<int>("HealthPointsId")
                        .HasColumnType("int");

                    b.Property<int>("HealthPointsValue")
                        .HasColumnType("int");

                    b.Property<int>("IntellectId")
                        .HasColumnType("int");

                    b.Property<int>("IntellectValue")
                        .HasColumnType("int");

                    b.Property<int>("JumpingId")
                        .HasColumnType("int");

                    b.Property<int>("JumpingValue")
                        .HasColumnType("int");

                    b.Property<int>("KickId")
                        .HasColumnType("int");

                    b.Property<int>("KickValue")
                        .HasColumnType("int");

                    b.Property<int>("LuckId")
                        .HasColumnType("int");

                    b.Property<int>("LuckValue")
                        .HasColumnType("int");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionValue")
                        .HasColumnType("int");

                    b.Property<int>("ResilienceId")
                        .HasColumnType("int");

                    b.Property<int>("ResilienceValue")
                        .HasColumnType("int");

                    b.Property<int>("RestId")
                        .HasColumnType("int");

                    b.Property<int>("RestValue")
                        .HasColumnType("int");

                    b.Property<int>("RunningId")
                        .HasColumnType("int");

                    b.Property<int>("RunningValue")
                        .HasColumnType("int");

                    b.Property<int>("SpeedId")
                        .HasColumnType("int");

                    b.Property<int>("SpeedValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeightId")
                        .HasColumnType("int");

                    b.Property<int>("WeightValue")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerId")
                        .HasColumnType("int");

                    b.Property<int>("WillpowerValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StatsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Headline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Headlines");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.BlueprintComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("BlueprintId")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlueprintId");

                    b.HasIndex("ComponentId");

                    b.ToTable("BlueprintComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.FormulaComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("FormulaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("FormulaId");

                    b.ToTable("FormulaComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailabilityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ItemsBase");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBaseEffectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChancePercent")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDealDamage")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("ItemBaseEffectList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.ServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LogMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceLogs");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CheckDC")
                        .HasColumnType("int");

                    b.Property<int>("ConcetrationEnduranceCost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DangerInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("EnduranceCost")
                        .HasColumnType("int");

                    b.Property<bool>("IsConcetration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDruidSpell")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPriestSpell")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<string>("SourceTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellLevel")
                        .HasColumnType("int");

                    b.Property<int>("SpellType")
                        .HasColumnType("int");

                    b.Property<string>("SpellTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WithdrawalCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellComponentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellComponentList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellSkillProtectionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellSkillProtectionList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Users.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemember")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.ToTable("AlchemicalItems");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Armor", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AmountOfEnhancements")
                        .HasColumnType("int");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int>("Stiffness")
                        .HasColumnType("int");

                    b.ToTable("Armor");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AdditionalPayment")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<float>("TimeSpend")
                        .HasColumnType("real");

                    b.ToTable("Blueprints");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlchemical")
                        .HasColumnType("bit");

                    b.Property<int>("SubstanceType")
                        .HasColumnType("int");

                    b.Property<string>("WhereToFind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("AdditionalPayment")
                        .HasColumnType("int");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<float>("TimeSpend")
                        .HasColumnType("real");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Item", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("StealthType")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Tool", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Weapon", b =>
                {
                    b.HasBaseType("TTRPG_Project.DAL.Entities.Database.Items.ItemBase");

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfEnhancements")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Grip")
                        .HasColumnType("int");

                    b.Property<bool>("IsAmmunition")
                        .HasColumnType("bit");

                    b.Property<int>("Reliability")
                        .HasColumnType("int");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("StealthType")
                        .HasColumnType("int");

                    b.HasIndex("SkillId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Abilitiy", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("Abilities")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.Navigation("Creature");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("Attacks")
                        .HasForeignKey("CreatureId");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.AttackEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", "Attack")
                        .WithMany("AttackEffectLists")
                        .HasForeignKey("AttackId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.Navigation("Attack");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsList", "SkillsList")
                        .WithMany()
                        .HasForeignKey("SkillsListId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.StatsList", "StatsList")
                        .WithMany()
                        .HasForeignKey("StatsListId");

                    b.Navigation("SkillsList");

                    b.Navigation("StatsList");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("CreatureEffectLists")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectID");

                    b.Navigation("Creature");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.CreatureRewardList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", "Creature")
                        .WithMany("CreatureRewardLists")
                        .HasForeignKey("CreatureId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", "ItemBase")
                        .WithMany("CreatureRewardLists")
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("Creature");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.SkillsTree", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.BlueprintComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", "Blueprint")
                        .WithMany("BlueprintComponentLists")
                        .HasForeignKey("BlueprintId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany("BlueprintComponentLists")
                        .HasForeignKey("ComponentId");

                    b.Navigation("Blueprint");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.FormulaComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany("FormulaComponentLists")
                        .HasForeignKey("ComponentId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Formula", "Formula")
                        .WithMany("FormulaComponentLists")
                        .HasForeignKey("FormulaId");

                    b.Navigation("Component");

                    b.Navigation("Formula");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBaseEffectList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", "ItemBase")
                        .WithMany("ItemBaseEffectLists")
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("Effect");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellComponentList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", "Spell")
                        .WithMany("SpellComponentLists")
                        .HasForeignKey("SpellId");

                    b.Navigation("Component");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.SpellSkillProtectionList", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Additional.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Spells.Spell", "Spell")
                        .WithMany("SpellSkillProtectionLists")
                        .HasForeignKey("SpellId");

                    b.Navigation("Effect");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.AlchemicalItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Armor", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Armor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Component", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Formula", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Item", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Item", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Tool", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Tool", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Weapon", b =>
                {
                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", null)
                        .WithOne()
                        .HasForeignKey("TTRPG_Project.DAL.Entities.Database.Items.Weapon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTRPG_Project.DAL.Entities.Database.Creatures.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Attack", b =>
                {
                    b.Navigation("AttackEffectLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Creatures.Creature", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Attacks");

                    b.Navigation("CreatureEffectLists");

                    b.Navigation("CreatureRewardLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.ItemBase", b =>
                {
                    b.Navigation("CreatureRewardLists");

                    b.Navigation("ItemBaseEffectLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Spells.Spell", b =>
                {
                    b.Navigation("SpellComponentLists");

                    b.Navigation("SpellSkillProtectionLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Blueprint", b =>
                {
                    b.Navigation("BlueprintComponentLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Component", b =>
                {
                    b.Navigation("BlueprintComponentLists");

                    b.Navigation("FormulaComponentLists");
                });

            modelBuilder.Entity("TTRPG_Project.DAL.Entities.Database.Items.Formula", b =>
                {
                    b.Navigation("FormulaComponentLists");
                });
#pragma warning restore 612, 618
        }
    }
}
